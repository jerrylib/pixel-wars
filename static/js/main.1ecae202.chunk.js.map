{"version":3,"sources":["components/Address.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","helpers/rpc.js","components/Balance.jsx","components/Account.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/EtherInput.jsx","components/Events.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","views/images/pic1.png","views/images/pic2.png","views/images/pic3.png","views/images/pic4.png","views/images/pic5.png","views/images/pic6.png","views/images/pic7.png","views/Home.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","hooks/useLotteryContract.js","views/Games.jsx","hooks/usePixelWarContract.js","views/PixelWars.jsx","App.jsx","index.jsx","constants.js","contracts/external_contracts.js"],"names":["Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorer","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","ethers","require","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","a","Signer","isSigner","provider","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","ALCHEMY_KEY","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","getRPCPollTime","_network","RPC_POLL_TIME","Balance","useState","dollarMode","setDollarMode","localProviderPollingTime","balance","useBalance","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","Account","accountButtonInfo","localProvider","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","shape","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","useEffect","span","textAlign","opacity","paddingRight","type","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","title","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","parseEther","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","push","fn","handleForm","returned","buttonIcon","stateMutability","defaultValue","bordered","disabled","height","args","baseType","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","contractDisplay","contractFuncInfo","contractFunc","connect","float","loading","EtherInput","mode","setMode","setDisplay","usdValue","ethValue","Events","contractName","eventName","startBlock","events","useEventListener","paddingBottom","dataSource","renderItem","item","Item","blockNumber","sender","purpose","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculatePK","officialEthersWallet","Wallet","calculateAddress","Password","currentPrivateKey","localStorage","getItem","setItem","Date","now","location","reload","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","onOk","onCancel","footer","to","SendOutlined","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","GasGauge","parseInt","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","children","defaultProps","Ramp","modalUp","setModalUp","allFaucets","n","networks","faucet","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","NETWORK","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","rpcUrl","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","Home","src","pic1","alt","pic2","pic3","pic4","pic5","pic6","pic7","ExampleUI","readContracts","writeContracts","newPurpose","setNewPurpose","border","YourContract","setPurpose","update","status","gasUsed","gas","encodeFunctionData","SyncOutlined","spin","range","defaultChecked","percent","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","d","toISOString","deployWarning","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","useLotteryContract","userProvider","players","setPlayers","tvl","setTvl","setLoading","LOTTERY_ADDRESS","LOTTERY_ABI","load","isEmpty","getPlayers","catch","finally","setTimeout","getBalance","participate","turn","pow","mul","pickWinner","off","Games","sortData","sortBy","values","groupBy","align","justify","header","index","mark","first","step","usePixelWarContract","x","setX","y","setY","colors","setColors","setEvents","PIXEL_WAR_ADDRESS","PIXEL_WAR_ABI","loadMap","all","maxX","maxY","nextMaxX","nextMaxY","loadColor","currentX","currentY","getColor","nextColors","addEventListener","transation","currentXValue","currentYValue","getBlock","timestamp","time","moment","format","interval","promiseArray","groupCollapsed","innerIndex","isUndefined","groupEnd","allSettled","res","reduce","rs","Block","handleMouseEnter","dataId","background","onMouseEnter","PixelWars","DEFAULT_COLOR","setColor","heightEvery","widthEvery","gutter","spinning","getAttribute","Array","innerItem","content","styles","wrap","onChangeComplete","hex","initialNetwork","NETWORKS","localhost","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","useLocation","process","REACT_APP_PROVIDER","mainnetProviderPollingTime","clearCachedProvider","disconnect","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","externalContracts","mainnetContracts","myMainnetDAIBalance","useContractReader","Web3Provider","code","reason","faucetAvailable","connection","useBurner","lte","selectedKeys","pathname","exact","path","DAI","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","getElementById","REACT_APP_CODESPACES","hostname","replace","global","mainnet","goerli","xdai","polygon","mumbai","localOptimismL1","localOptimism","goerliOptimism","optimism","goerliArbitrum","arbitrum","devnetArbitrum","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode","anonymous","indexed","internalType","outputs","module","exports","abi","constant","UNI"],"mappings":"m0BAQQA,EAASC,IAATD,KA2BO,SAASE,EAAQC,GAC9B,IAAQC,EAAiBC,cAAjBD,aACFE,EAAUH,EAAMI,OAASJ,EAAMG,QAC/BE,EAAMC,YAAiBN,EAAMO,YAAaJ,GAC1CK,EAAWH,GAAOA,EAAII,MAAM,KAC5BC,EAAgBF,GAA8C,QAAlCA,EAASA,EAASG,OAAS,GACvDC,EARkB,SAACT,EAASU,GAAV,gBAA+BA,GAAiB,wBAAhD,mBAAkFV,GAQpFW,CAAkBX,EAASH,EAAMa,eACnDE,GAAwB,OAAPZ,QAAO,IAAPA,OAAA,EAAAA,EAASa,OAAO,EAAG,IAAK,OAAxB,OAAgCb,QAAhC,IAAgCA,OAAhC,EAAgCA,EAASa,QAAQ,IAUtE,OARIN,EACFK,EAAiBV,EACO,UAAfL,EAAMiB,KACfF,GAAkB,MAAQZ,EAAQa,QAAQ,GAClB,SAAfhB,EAAMiB,OACfF,EAAiBZ,GAGdA,EAQDH,EAAMkB,UAEN,sBAAMC,MAAO,CAAEC,cAAe,UAA9B,SACE,mBACED,MAAO,CAAEE,MAAwB,UAAjBpB,EAA2B,UAAY,QACvDqB,OAAO,SACPC,KAAMX,EACNY,IAAI,sBAJN,SAME,cAAC,IAAD,CAAUC,KAAMtB,EAAQuB,cAAeT,KAAM,EAAGU,MAAO,QAO7D,iCACE,sBAAMR,MAAO,CAAEC,cAAe,UAA9B,SACE,cAAC,IAAD,CAAUK,KAAMtB,EAAQuB,cAAeT,KAAM,EAAGU,MAAO3B,EAAM4B,SAAW5B,EAAM4B,SAAW,EAAI,MAE/F,sBAAMT,MAAO,CAAEC,cAAe,SAAUS,YAAa,EAAGD,SAAU5B,EAAM4B,SAAW5B,EAAM4B,SAAW,IAApG,SACG5B,EAAM8B,SACL,cAACjC,EAAD,CAAMkC,SAAU,CAAED,SAAU9B,EAAM8B,UAAYE,SAAU,CAAEC,KAAM9B,GAAhE,SACE,mBACEgB,MAAO,CAAEE,MAAwB,UAAjBpB,EAA2B,UAAY,QACvDqB,OAAO,SACPC,KAAMX,EACNY,IAAI,sBAJN,SAMGT,MAIL,cAAClB,EAAD,CAAMmC,SAAU,CAAEC,KAAM9B,GAAxB,SACE,mBACEgB,MAAO,CAAEE,MAAwB,UAAjBpB,EAA2B,UAAY,QACvDqB,OAAO,SACPC,KAAMX,EACNY,IAAI,sBAJN,SAMGT,WA9CT,+BACE,cAAC,IAAD,CAAUmB,QAAM,EAACC,UAAW,CAAEC,KAAM,O,uCCnDpCC,EAAWC,EAAQ,IAAnBD,OAKFE,EAAY,GAIH,SAASC,EAAWC,EAAkBC,EAAUC,GAC7D,GAAgC,qBAArBF,EAET,8CAAO,WAAOG,EAAIC,GAAX,yCAAAC,EAAA,0DAI4C,IAA7CT,EAAOU,OAAOC,SAASP,GAJtB,oBAKHQ,EAAWR,EAAiBQ,SAC5BC,EAAST,EANN,KAOOA,EAAiBQ,UAPxB,qCAO2CR,EAAiBQ,SAASE,aAPrE,0BAOHC,EAPG,iCAQMX,EAAiBY,YARvB,wBASHJ,EAAWR,EACXS,EAAST,EAAiBa,YAVvB,UAWab,EAAiBU,aAX9B,QAWHC,EAXG,kBAcLG,QAAQC,IAAI,UAAWJ,GACT,KACVK,EAAS,KACbC,EAAU,CACRC,OAAQC,IACRC,OAAQ,WACRC,UAAWV,EAAQW,QAEnBC,mBAAoB,SAAAC,GACPV,QAAQC,IAAI,YAAaS,GACpC,IAAMC,EAAmB3B,EAAU0B,EAAcE,YAAYC,MAC7B,oBAArBF,GACTA,EAAiBD,EAAcE,eAKrCV,EAASY,YAAOX,GAEZY,EAAmB,GACnBlB,EAAQmB,MAAQnB,EAAQW,QAAU,IACpCO,EAAmBlB,EAAQmB,KAAO,KAGhCC,EAAiB,WAAaF,EAAmB,mBAC7B,MAApBlB,EAAQW,UACVS,EAAiB,uCAxCd,YA6CC5B,aAAc6B,SA7Cf,wBA8CUlB,QAAQC,IAAI,cAAeZ,GA9CrC,UA+CcA,EA/Cd,QA+CD8B,EA/CC,sCAiDI9B,EAAGF,WACNE,EAAGF,SAAWA,GAAYL,EAAOsC,MAAMC,WAAW,MAAO,SAEtDhC,EAAGiC,WACNjC,EAAGiC,SAAWxC,EAAOsC,MAAMG,QAAQ,OAE1BvB,QAAQC,IAAI,aAAcZ,GAvDpC,UAwDcM,EAAO6B,gBAAgBnC,GAxDrC,QAwDD8B,EAxDC,kBA0DQnB,QAAQC,IAAI,UAAWkB,GAG9B7B,IACFN,EAAUmC,EAAON,MAAQvB,KAIvBY,GAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAKuB,QAAQ5B,EAAQW,UAAY,GAlE7D,mBAmEmBN,EAAOW,KAAKM,EAAON,MAnEtC,EAmEOa,QACAC,GAAG,OAAO,SAAAf,GAChB,MAAO,CACLgB,QAAS,kBAAMC,OAAOC,MAAM1C,GAAa6B,GAAkBL,EAAYC,WAtE1E,2BA0EDkB,IAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAaf,EAAON,KACpBsB,UAAW,iBAIT7C,EAjFH,kCAkFwBD,EAlFxB,QAkFO+C,EAlFP,OAmFOC,EAAoBC,YAAW,sBAAC,4BAAA/C,EAAA,6DACpCS,QAAQC,IAAI,qBAAsBmC,EAAU1C,GADR,SAEIA,EAAS6C,sBAAsBH,EAASvB,MAF5C,QAE9B2B,EAF8B,SAGHA,EAA0BC,gBACzDnD,EAAS,2BAAK8C,GAAaI,IAC3BE,cAAcL,IALoB,2CAOnC,KA1FJ,WA8FwB,oBAAhBlB,EAAOwB,KA9Ff,kCA+FKxB,EAAOwB,OA/FZ,iCAkGIxB,GAlGJ,mCAoGQnB,QAAQC,IAAR,MAEPgC,EACF,KAAEW,MAAQ,KAAEA,KAAKX,QACb,KAAEW,KAAKX,QACP,KAAEY,OAASC,KAAKC,MAAMD,KAAKE,UAAU,KAAEH,QAAQI,KAC/CH,KAAKC,MAAMD,KAAKC,MAAMD,KAAKE,UAAU,KAAEH,QAAQI,MAAMJ,MAAMZ,QAC3D,KAAEW,KACF,KAAEA,KACFE,KAAKE,UAAL,OACD,KAAEH,OAAS,KAAEZ,UAChBA,EAAU,KAAEA,SAGdjC,QAAQC,IAAI,uBAAwBgC,GACpC,KACMiB,EAAMJ,KAAKC,MAAMd,KACViB,EAAID,OACTE,EAAWL,KAAKC,MAAMG,EAAID,QACdE,EAASN,OAASM,EAASN,MAAMZ,UAC/CA,EAAUkB,EAASN,MAAMZ,SAG7B,MAAOmB,IAITrB,IAAac,MAAM,CACjBZ,QAAS,oBACTC,YAAaD,IAEX3C,GAAgC,oBAAbA,GACrBA,EAAS,EAAD,IApIP,2DAAP,wD,wGCFE+D,EALa,IAAIC,IAAW,CAChCC,QAAS,aAI2BC,iBAAX,+CAAoEC,KAAe,GA4E/FC,EAtEQ,kBACrB,IAAIC,IAAU,CACZ9D,QAAS,UACT+D,eAAe,EACfC,MAAO,QACPC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACT9D,QAAS,CACP+D,OAAQ,2CACRC,SAAUC,IACVC,IAAK,CACH,GAAI,8BACJ,IAAK,8BACL,IAAK,0BACL,MAAO,wBACP,MAAO,+BACP,MAAO,oCACP,MAAO,4CAIbC,OAAQ,CACNC,QAAS,CACPC,KAAM,uGACNxD,KAAM,SACNkB,YAAa,yBAEf8B,QAASS,IACTtE,QAAS,CACPuE,GAAI,yCAGRC,UAAW,CACTX,QAASY,IACTzE,QAAS,CACP0E,IAAK,6BAgBT,oBAAqB,CACnBN,QAAS,CACPC,KAAM,4GACNxD,KAAM,WACNkB,YAAa,iDAEf8B,QAASX,EACTyB,UAAU,WAAD,4BAAE,WAAOpF,EAAUqF,GAAjB,SAAAxF,EAAA,sEACHG,EAASsF,SADN,gCAEFtF,GAFE,2CAAF,qDAAC,IAKZuF,UAAW,CACTjB,QAASkB,S,yBCnFGC,iBAAO,CAAEC,KAAM,iBAAkBC,KAAM,OAAQC,SAAU,UCCtE,IAAMC,EAAiB,SAAA7F,GAAa,IAAD,EAExC,OAAoC,SAAxB,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAU8F,gBAAV,eAAoBhF,SACf,EAEAiF,KCJHrE,EAAUrC,EAAQ,IAAlBqC,MA4BO,SAASsE,EAAQjJ,GAC9B,MAAoCkJ,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEIC,EAA2BP,EAAe9I,EAAMiD,UAE9CqG,EAAUC,YAAWvJ,EAAMiD,SAAUjD,EAAMG,QAASkJ,GACtDG,EAAeC,WAAW,QAC1BC,EAAeJ,EAKnB,GAH6B,qBAAlBtJ,EAAMsJ,UAAyBI,EAAe1J,EAAMsJ,SACpC,qBAAhBtJ,EAAMI,QAAuBsJ,EAAe1J,EAAMI,OAEzDsJ,EAAc,CAChB,IAAMC,EAAehF,EAAMiF,YAAYF,GACvCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAEpCE,EAAQ/J,EAAM+J,OAAS/J,EAAMgK,kBAAoB,EAMvD,OAJIb,IACFW,GAAkBN,EAAeO,GAAOF,QAAQ,GAAK,QAIrD,sBACE1I,MAAO,CACLC,cAAe,SACfQ,SAAU5B,EAAMiB,KAAOjB,EAAMiB,KAAO,GACpCgJ,QAAS,EACTC,OAAQ,WAEVC,QAAS,WACPf,GAAeD,IARnB,SAWGW,IC3BQ,SAASM,GAAT,GAYX,IAGEC,EAdJlK,EAWC,EAXDA,QAEAmK,GASC,EAVDC,WAUC,EATDD,eACAE,EAQC,EARDA,gBAEAtJ,GAMC,EAPD6I,MAOC,EAND7I,WACAuJ,EAKC,EALDA,UACAC,EAIC,EAJDA,cACAC,EAGC,EAHDA,kBACA9J,EAEC,EAFDA,cAEC,EADD+J,WAMEP,GADF,OAAII,QAAJ,IAAIA,OAAJ,EAAIA,EAAWI,gBACO,CAAEtG,KAAM,SAAUuG,OAAQH,GAE1B,CAAEpG,KAAM,UAAWuG,OAAQJ,GAGjD,IAAM5C,GAAW5G,GACf,iCACGf,GACC,cAACJ,EAAD,CAASI,QAASA,EAASI,YAAaiK,EAAiB3J,cAAeA,EAAee,SAAU,KAEnG,cAACqH,EAAD,CAAS9I,QAASA,EAAS8C,SAAUqH,EAAeP,MAAO,EAAG9I,KAAM,QAgBxE,OACE,sBAAKE,MAAO,CAAE2G,QAAS,QAAvB,UACGA,EACA2C,GACC,cAAC,IAAD,CAAQtJ,MAAO,CAAE4J,WAAY,GAAKC,MAAM,QAAQb,QAASE,EAAkBS,OAA3E,SACGT,EAAkB9F,U,8ECtFd,SAAS0G,GAAQjL,GAC9B,OAAKA,EAAMG,SAAgD,oBAA9BH,EAAMG,QAAQuB,YAIpC,cAAC,IAAD,aAAUD,KAAMzB,EAAMG,QAAQuB,eAAmB1B,IAH/C,yBCEX,IAAMkL,GAAQ,eAAC/K,EAAD,uDAAW,GAAX,OAAkBA,EAAQgL,SAAS,SAAWhL,EAAQgL,SAAS,SA4B9D,SAASC,GAAapL,GACnC,IAAQO,EAA0BP,EAA1BO,YAAauB,EAAa9B,EAAb8B,SACrB,EAA0BoH,mBAASlJ,EAAMI,OAAzC,mBAAOA,EAAP,KAAciL,EAAd,KACA,EAAwBnC,oBAAS,GAAjC,mBAAOoC,EAAP,KAAaC,EAAb,KAEMC,EAAsC,qBAAhBxL,EAAMI,MAAwBJ,EAAMI,MAAQA,EAClEC,EAAMC,YAAiBN,EAAMO,YAAaiL,GAE1CC,EAAgBC,sBAAW,uCAC/B,WAAMC,GAAN,iBAAA7I,EAAA,yDAC0B,qBAAb6I,EADb,qBAGQT,GADA/K,EAAUwL,GAFlB,0CAKsCpL,EAAYqL,YAAYzL,GAL9D,QAKc0L,EALd,UAOU1L,EAAU0L,GAPpB,0DAYIR,EAASlL,GACe,oBAAb2B,GACTA,EAAS3B,GAdf,0DAD+B,sDAmB/B,CAACI,EAAauB,IAGhB,OACE,gCACGwJ,EACC,qBACEnK,MAAO,CACL2K,OAAQ,IACRC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,QAET/B,QAAS,WACPoB,GAAQ,IATZ,SAYE,cAAC,KAAD,CACEY,MAAO,IACPC,WAAY,KACZC,QAAS,SAAA1F,GACPpD,QAAQC,IAAI,aAAcmD,GAC1B4E,GAAQ,IAEVe,OAAQ,SAAAX,GACN,GAAIA,EAAU,CACZpI,QAAQC,IAAI,aAAcmI,GAC1B,IAAIY,EAAmBZ,EACnBY,EAAiBvH,QAAQ,MAAQ,IACnCuH,EAAmBA,EAAiBvL,OAAOuL,EAAiBC,YAAY,OACxEjJ,QAAQC,IAAI,gBAAiB+I,IAE/BhB,GAAQ,GACRE,EAAcc,KAGlBpL,MAAO,CAAE+K,MAAO,YAIpB,GAEF,cAAC,KAAD,CACEjE,GAAG,YACH1D,KAAK,YACLkI,aAAa,MACbC,UAAW1M,EAAM0M,UACjBC,YAAa3M,EAAM2M,YAAc3M,EAAM2M,YAAc,UACrDC,OAAQ,cAAC3B,GAAD,CAAS9K,QAASqL,EAAcvK,KAAM,EAAGU,MAAO,IACxDvB,MAAOiC,UAAOsC,MAAMkI,UAAUrB,KAAkBN,GAAMM,IAAiBN,GAAM7K,GAAOA,EAAMmL,EAC1FsB,WACE,sBACE3L,MAAO,CAAE4L,UAAW,EAAG7C,OAAQ,WAC/BC,QAAS,WACPoB,GAASD,IAHb,UAME,cAAC,KAAD,CAAO0B,MAAO,cAACC,GAAA,EAAD,CAAgB9L,MAAO,CAAES,SAAU,KAAjD,SACE,cAACsL,GAAA,EAAD,CAAgB/L,MAAO,CAAES,SAAU,QAC5B,IARX,UAYFE,SAAU,SAAA6E,GACR8E,EAAc9E,EAAErF,OAAOlB,aC9HjC,OAA6BkC,EAAQ,IAArC,GAAQqC,MAAR,GAAewI,U,0BCCPxI,GAAUrC,EAAQ,IAAlBqC,MAEFyI,GAAe,SAACC,GAA0C,IAAnCC,EAAkC,wDAAlBzM,EAAkB,uCAC7D,GAAIwM,GAASA,EAAME,SACjB,IACE,OAAOF,EAAME,WACb,MAAO5G,GACP,IAAM6G,EAAc,SAAM7I,GAAM8I,YAAYJ,EAAO,SACnD,OAAOC,EAASE,EAAc,sBAAMrM,MAAO,CAAEuM,aAAc,aAAcxB,MAAO,QAAlD,SAA6DsB,IAG/F,GAAIH,GAASA,EAAMrI,SAAmC,IAAxBqI,EAAMrI,QAAQ,OAAgC,KAAjBqI,EAAM1M,OAC/D,OAAO2M,EAASD,EAAQ,cAACtN,EAAD,CAASI,QAASkN,EAAOzL,SAAU,GAAIf,cAAeA,IAEhF,GAAIwM,GAASA,EAAMM,aAA0C,UAA3BN,EAAMM,YAAYpJ,KAAkB,CACpE,IAAMqJ,EAAe,SAAAC,GAAC,MAAK,CAAC,SAAU,WAAWC,gBAAgBD,GAAKA,EAAIE,GAAmBF,IACvFL,EAAcnH,KAAKE,UAAU8G,EAAMW,IAAIJ,IAC7C,OAAON,EACLE,EAEA,sBAAMrM,MAAO,CAAEuM,aAAc,aAAcxB,MAAO,QAAlD,SAA6DsB,EAAYS,WAAW,IAAK,SAG7F,OAAO5H,KAAKE,UAAU8G,IAGlBU,GAAqB,SAAAV,GAAK,OAAID,GAAaC,GAAO,ICoBzCa,GA7CS,SAAC,GAAwF,IAAtFC,EAAqF,EAArFA,iBAAkBC,EAAmE,EAAnEA,aAAcC,EAAqD,EAArDA,gBAAiBC,EAAoC,EAApCA,eAAgBzN,EAAoB,EAApBA,cAC1F,EAAgCqI,mBAAS,IAAzC,mBAAOqF,EAAP,KAAiBC,EAAjB,KAEMC,EAAU/C,sBAAW,sBAAC,4BAAA5I,EAAA,+EAEGqL,IAFH,OAElBO,EAFkB,OAGxBF,EAAYE,GACZJ,GAAe,GAJS,gDAMxB/K,QAAQC,IAAR,MANwB,yDAQzB,CAACgL,EAAaL,EAAkBG,IAMnC,OAJAK,qBAAU,WACRF,MACC,CAACA,EAASJ,EAAiBF,IAG5B,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACES,KAAM,EACNzN,MAAO,CACL0N,UAAW,QACXC,QAAS,KACTC,aAAc,EACdnN,SAAU,IANd,SASGwM,EAAa7J,OAEhB,cAAC,IAAD,CAAKqK,KAAM,GAAX,SACE,6BAAKxB,GAAamB,GAAU,EAAO1N,OAErC,cAAC,IAAD,CAAK+N,KAAM,EAAX,SACE,6BACE,cAAC,IAAD,CAAQI,KAAK,OAAO7E,QAASsE,EAASQ,KAAK,wBAIjD,cAAC,KAAD,Q,mBCtCN,GAA6B3M,EAAQ,IAA7BqC,GAAR,GAAQA,MAAOuK,GAAf,GAAeA,UAETC,GAAsB,SAACf,EAAcgB,EAAOC,GAChD,IAAM9K,GAAY,OAAL6K,QAAK,IAALA,OAAA,EAAAA,EAAO7K,MAAO6K,EAAM7K,KAAO,SAAW8K,EAAa,IAChE,OAAOjB,EAAa7J,KAAO,IAAMA,EAAO,IAAM6K,EAAMJ,MAKvC,SAASM,GAAT,GAA+F,IAAvEnB,EAAsE,EAAtEA,iBAAkBC,EAAoD,EAApDA,aAAcnL,EAAsC,EAAtCA,SAAUP,EAA4B,EAA5BA,SAAU4L,EAAkB,EAAlBA,eACzF,EAAwBpF,mBAAS,IAAjC,mBAAOqG,EAAP,KAAaC,EAAb,KACA,EAA8BtG,qBAA9B,mBAAOuG,EAAP,KAAgBC,EAAhB,KACA,EAAsCxG,qBAAtC,mBAAOyG,EAAP,KAAoBC,EAApB,KAEMhN,EAAKJ,EAAWS,EAAUP,GAE1BmN,EAASzB,EAAayB,OAAO7B,KAAI,SAACoB,EAAOC,GAC7C,IAAMjH,EAAM+G,GAAoBf,EAAcgB,EAAOC,GAEjDS,EAAU,GACd,GAAmB,YAAfV,EAAMJ,KACRc,EACE,cAAC,KAAD,CAASpK,UAAU,QAAQqK,MAAM,aAAjC,SACE,qBACEf,KAAK,SACL7N,MAAO,CAAE+I,OAAQ,WACjBC,QAAO,sBAAE,8BAAArH,EAAA,sDACH6B,GAAMqL,YAAYT,EAAKnH,MACnB6H,EAD0B,eACRV,IACbnH,GAAOzD,GAAMuL,mBAAmBX,EAAKnH,IAChDoH,EAAQS,MAEFA,EADD,eACmBV,IACbnH,GAAOzD,GAAMwL,oBAAoBZ,EAAKnH,IACjDoH,EAAQS,IARH,2CAHX,kCAmBC,GAAmB,UAAfb,EAAMJ,KACfc,EACE,cAAC,KAAD,CAASpK,UAAU,QAAQqK,MAAM,SAAjC,SACE,qBACEf,KAAK,SACL7N,MAAO,CAAE+I,OAAQ,WACjBC,QAAO,sBAAE,8BAAArH,EAAA,sDACH6B,GAAMqL,YAAYT,EAAKnH,MACnB6H,EAD0B,eACRV,IACbnH,GAAOzD,GAAMyL,aAAab,EAAKnH,IAC1CoH,EAAQS,MAEFA,EADD,eACmBV,IACbnH,GAAOzD,GAAMG,QAAQH,GAAM0L,YAAYd,EAAKnH,KACvDoH,EAAQS,IARH,2CAHX,kCAmBC,GAAmB,YAAfb,EAAMJ,KACfc,EACE,cAAC,KAAD,CAASpK,UAAU,QAAQqK,MAAM,aAAjC,SACE,qBACEf,KAAK,SACL7N,MAAO,CAAE+I,OAAQ,WACjBC,QAAO,sBAAE,4BAAArH,EAAA,uDACDmN,EADC,eACiBV,IACbnH,GAAOzD,GAAM2L,WAAWf,EAAKnH,IACxCoH,EAAQS,GAHD,2CAHX,iCAaC,GAAmB,YAAfb,EAAMJ,KAAoB,CACnC,IAAMnD,EAAkB0D,EAAKnH,IAAQmH,EAAKnH,GAAK1G,aAAe6N,EAAKnH,GAAK1G,cAAc6O,OAClF1E,GAA8C,KAA3BA,EAAgBlL,SACrCmP,EACE,cAAC,KAAD,CAASpK,UAAU,QAAQqK,MAAM,UAAjC,SACE,cAAC,IAAD,CAAUtO,KAAMoK,EAAiBlK,MAAO,OAMhD,OACE,qBAAKR,MAAO,CAAEqP,OAAQ,GAAtB,SACE,cAAC,KAAD,CACEvP,KAAK,QACL0L,YAAayC,EAAM7K,KAAO6K,EAAMJ,KAAO,IAAMI,EAAM7K,KAAO6K,EAAMJ,KAChEvC,aAAa,MACbrM,MAAOmP,EAAKnH,GACZ7D,KAAM6D,EACNtG,SAAU,SAAA2O,GACR,IAAMR,EAAU,eAAQV,GACxBU,EAAWQ,EAAMnP,OAAOiD,MAAQkM,EAAMnP,OAAOlB,MAC7CoP,EAAQS,IAEVS,OAAQZ,KAZoB1H,MAkB9BuI,EACJ,qBAAKxP,MAAO,CAAEqP,OAAQ,GAAtB,SACE,cAAC,KAAD,CACE7D,YAAY,oBACZ7K,SAAU,SAAA6E,GAAC,OAAI+I,EAAW/I,EAAErF,OAAOlB,QACnCA,MAAOqP,EACP3C,WACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK8B,KAAM,GAAX,SACE,cAAC,KAAD,CAASlJ,UAAU,QAAQqK,MAAM,YAAjC,SACE,qBACEf,KAAK,SACL7N,MAAO,CAAE+I,OAAQ,WACjBC,QAAO,sBAAE,4BAAArH,EAAA,uDACD8N,EAAanH,WAAWgG,KACdC,EAAW,GAAKkB,EAAU,SAAG,GAAM,KAF5C,2CAHX,8BAYJ,cAAC,IAAD,CAAKhC,KAAM,GAAX,SACE,cAAC,KAAD,CAASlJ,UAAU,QAAQqK,MAAM,gBAAjC,SACE,qBACEf,KAAK,SACL7N,MAAO,CAAE+I,OAAQ,WACjBC,QAAO,sBAAE,sBAAArH,EAAA,sDACP4M,EAAWR,GAAU2B,KAAKpB,GAASqB,eAD5B,2CAHX,uCAxBiB,gBA0C7B1C,EAAa2C,SACflB,EAAOmB,KAAKL,GAGd,IAtJiBM,EAsJXC,EAAa,SAAAC,GACbA,GACF3B,EAAQ,KAIN4B,EA5JwC,UAA7BH,EA4Ja7C,GA5JJiD,iBAAqD,SAAvBJ,EAAGI,gBA6JzD,cAAC,IAAD,CAAQlQ,MAAO,CAAE4J,YAAa,IAA9B,8BAEA,cAAC,IAAD,CAAQ5J,MAAO,CAAE4J,YAAa,IAA9B,8BAoEF,OAlEA8E,EAAOmB,KACL,qBAAK7P,MAAO,CAAE+I,OAAQ,UAAWsG,OAAQ,GAAzC,SACE,cAAC,KAAD,CACE1O,SAAU,SAAA6E,GAAC,OAAIiJ,EAAejJ,EAAErF,OAAOlB,QACvCkR,aAAa,GACbC,UAAU,EACVC,UAAQ,EACRpR,MAAOuP,EACPe,OACE,qBACEvP,MAAO,CAAE+K,MAAO,GAAIuF,OAAQ,GAAIjB,OAAQ,GACxCxB,KAAK,UACL7E,QAAO,sBAAE,oCAAArH,EAAA,yDACD4O,EAAOtD,EAAayB,OAAO7B,KAAI,SAACoB,EAAOC,GAC3C,IAAMjH,EAAM+G,GAAoBf,EAAcgB,EAAOC,GACjDjP,EAAQmP,EAAKnH,GAUjB,MATI,CAAC,QAAS,SAAS0F,SAASsB,EAAMuC,UACpCvR,EAAQiG,KAAKC,MAAMlG,GACK,SAAfgP,EAAMJ,OAEb5O,EADY,SAAVA,GAA8B,MAAVA,GAA2B,QAAVA,GAA6B,SAAVA,GAA8B,WAAVA,EACtE,EAEA,GAGLA,KAI4B,SAAjCgO,EAAaiD,iBAA+D,SAAjCjD,EAAaiD,gBAjBrD,0CAmBoBlD,EAAgB,WAAhB,eAAoBuD,IAnBxC,OAmBGP,EAnBH,OAoBHD,EAAWC,GACXzM,EAASqJ,GAAmBoD,GArBzB,kDAuBH5N,QAAQ6C,MAAR,MAvBG,uCA0BCwL,EAAY,GACdnC,IACFmC,EAAUxR,MAAQqP,GAEhB/M,IACFkP,EAAUlP,SAAWA,GA/BlB,UAqCkBE,EAAGuL,EAAgB,WAAhB,eAAoBuD,GAApB,QAA0BE,MArC/C,QAqCCT,EArCD,OAsCLD,EAAWC,GACXzM,EAAS0I,GAAa+D,GAvCjB,QA0CP5N,QAAQC,IAAI,kBAAmBkB,GAC/BkL,EAAelL,GACf4J,GAAe,GA5CR,0DAHX,SAkDG8C,OA1DyC,aAkElD,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CACExC,KAAM,EACNzN,MAAO,CACL0N,UAAW,QACXC,QAAS,KACTC,aAAc,EACdnN,SAAU,IANd,SASGwM,EAAa7J,OAEhB,cAAC,IAAD,CAAKqK,KAAM,GAAX,SAAgBiB,OAElB,cAAC,KAAD,OCzPN,IAAMgC,GACJ,6CACa,IACX,sBAAK1Q,MAAO,CAAE8I,QAAS,IAAvB,4BACkB,IAChB,sBACE6H,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,4BAKQ,IAPV,MAQM,IACJ,sBACEF,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,6BAKQ,IAdV,gCAiBA,sBAAK7Q,MAAO,CAAE8I,QAAS,IAAvB,UACE,sBAAM9I,MAAO,CAAE8Q,YAAa,GAAKC,KAAK,MAAM,aAAW,UAAvD,0BADF,iCAKE,sBACEJ,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,6BAKQ,IACR,sCAXF,sCAkBW,SAASG,GAAT,GAYX,IAEEC,EAbJC,EAWC,EAXDA,eAEA3P,GASC,EAVD4P,QAUC,EATD5P,UACAQ,EAQC,EARDA,OACAD,EAOC,EAPDA,SACAsB,EAMC,EANDA,KACAgO,EAKC,EALDA,KACAxI,EAIC,EAJDA,MACAlJ,EAGC,EAHDA,cACAkD,EAEC,EAFDA,QACAyO,EACC,EADDA,eAEMC,EAAYC,YAAkBzP,EAAUuP,EAAgBzO,GAQxD5D,GAHJiS,EAHGC,IACQI,EAAYA,EAAUlO,GAAQ,KAKhB6N,EAASjS,QAAU,GACxCwS,EAAqBC,YAA2B3P,EAAU9C,GAE1D0S,EAA6BC,mBAAQ,WAMzC,OALgBV,EACZW,OAAOC,QAAQZ,EAASa,UAAUC,WAAWC,QAC3C,SAAAlC,GAAE,MAAsB,aAAlBA,EAAG,GAAH,QAAkCsB,GAAQA,EAAKvN,QAAQiM,EAAG,GAAH,MAAiB,MAEhF,KAEH,CAACmB,EAAUG,IAEd,EAA0CrJ,oBAAS,GAAnD,mBAAOmF,EAAP,KAAwBC,EAAxB,KACM8E,EAAkBP,EAA2B7E,KAAI,SAAAqF,GACrD,IArCgBpC,EAqCVqC,EACoC,SAAxCD,EAAiB,GAAGhC,iBAAsE,SAAxCgC,EAAiB,GAAGhC,gBAClEe,EAASiB,EAAiB,IAC1BjB,EAASmB,QAAQrQ,GAAQmQ,EAAiB,IAEhD,MAA4B,oBAAjBC,EA1CmC,UAA9BrC,EA2CEoC,EAAiB,IA3CThC,iBAAqD,SAAvBJ,EAAGI,iBAAoD,IAArBJ,EAAGpB,OAAOlP,OA2DhG,cAAC2O,GAAD,CAEEnB,iBAAkBmF,EAClBlF,aAAciF,EAAiB,GAC/BpQ,SAAUA,EACVP,SAAUA,EACV4L,eAAgBA,GALX,KAAO+E,EAAiB,IAd7B,cAAC,GAAD,CAEElF,iBAAkBmF,EAClBlF,aAAciF,EAAiB,GAC/BhF,gBAAiBA,EACjBC,eAAgBA,EAChBzN,cAAeA,GALVwS,EAAiB,GAAG9O,MAsB1B,QAGT,OACE,qBAAKpD,MAAO,CAAEqP,OAAQ,OAAQtE,MAAO,QAArC,SACE,cAAC,KAAD,CACE6D,MACE,sBAAK5O,MAAO,CAAES,SAAU,IAAxB,UACG2C,EACD,sBAAKpD,MAAO,CAAEqS,MAAO,SAArB,UACE,cAACzT,EAAD,CAASK,MAAOD,EAASU,cAAeA,IACxC,cAACoI,EAAD,CAAS9I,QAASA,EAAS8C,SAAUA,EAAU8G,MAAOA,UAI5D9I,KAAK,QACLE,MAAO,CAAE4L,UAAW,GAAIb,MAAO,QAC/BuH,QAASL,GAAmBA,EAAgBzS,QAAU,EAZxD,SAcGgS,EAAqBS,EAAkBvB,OCtGjC,SAAS6B,GAAW1T,GACjC,MAAwBkJ,mBAASlJ,EAAM+J,MAAQ,MAAQ,OAAvD,mBAAO4J,EAAP,KAAaC,EAAb,KACA,EAA8B1K,qBAA9B,mBAAOpB,EAAP,KAAgB+L,EAAhB,KACA,EAA0B3K,qBAA1B,mBAAO9I,EAAP,KAAciL,EAAd,KAEMG,EAAsC,qBAAhBxL,EAAMI,MAAwBJ,EAAMI,MAAQA,EAQxE,OANAuO,qBAAU,WACHnD,GACHqI,EAAW,MAEZ,CAACrI,IAGF,cAAC,KAAD,CACEmB,YAAa3M,EAAM2M,YAAc3M,EAAM2M,YAAc,aAAegH,EACpEjH,UAAW1M,EAAM0M,UACjBE,OAAiB,QAAT+G,EAAiB,IAAM,SAC/BvT,MAAO0H,EACPgF,WACG9M,EAAM+J,MAGL,qBACE5I,MAAO,CAAE+I,OAAQ,WACjBC,QAAS,WACP,GAAa,QAATwJ,EACFC,EAAQ,OACRC,EAAWrI,QAGX,GADAoI,EAAQ,OACJpI,EAAc,CAChB,IAAMsI,EAAW,IAAMrK,WAAW+B,GAAgBxL,EAAM+J,OAAOF,QAAQ,GACvEgK,EAAWC,QAEXD,EAAWrI,IAZnB,SAiBY,QAATmI,EAAiB,mBAAW,qBAnB/B,GAuBJ7R,SAAQ,uCAAE,WAAM6E,GAAN,mBAAA7D,EAAA,sDACF6I,EAAWhF,EAAErF,OAAOlB,MACb,QAATuT,GACIpH,EAAmB9C,WAAWkC,KAE5BoI,EAAWxH,EAAmBvM,EAAM+J,MAC1CsB,EAAS0I,GACqB,oBAAnB/T,EAAM8B,UACf9B,EAAM8B,SAASiS,GAEjBF,EAAWlI,IAEXkI,EAAWlI,IAGbN,EAASM,GACqB,oBAAnB3L,EAAM8B,UACf9B,EAAM8B,SAAS6J,GAEjBkI,EAAWlI,IAnBL,2CAAF,wD,yBCrDC,SAASqI,GAAT,GAAqG,IAAnFvB,EAAkF,EAAlFA,UAAWwB,EAAuE,EAAvEA,aAAcC,EAAyD,EAAzDA,UAAW5J,EAA8C,EAA9CA,cAAeE,EAA+B,EAA/BA,gBAAiB2J,EAAc,EAAdA,WAE7FC,EAASC,aAAiB5B,EAAWwB,EAAcC,EAAW5J,EAAe6J,GAEnF,OACE,sBAAKhT,MAAO,CAAE+K,MAAO,IAAKsE,OAAQ,OAAQzD,UAAW,GAAIuH,cAAe,IAAxE,UACE,yCACA,cAAC,KAAD,CACE/C,UAAQ,EACRgD,WAAYH,EACZI,WAAY,SAAAC,GACV,OACE,eAAC,KAAKC,KAAN,WACE,cAAC3U,EAAD,CAASI,QAASsU,EAAK/C,KAAK,GAAInR,YAAaiK,EAAiB5I,SAAU,KACvE6S,EAAK/C,KAAK,KAFG+C,EAAKE,YAAc,IAAMF,EAAK/C,KAAKkD,OAAS,IAAMH,EAAK/C,KAAKmD,e,0FC3BzE,SAASC,GAAT,GAA0C,IAAlBC,EAAiB,EAAjBA,cACrC,EAA4C7L,qBAA5C,mBAAO8L,EAAP,KAAuBC,EAAvB,KACA,EAAsD/L,mBAAS,KAA/D,mBAAOgM,EAAP,KAA4BC,EAA5B,KACA,EAAgCjM,mBAAS,IAAzC,mBAAOkM,EAAP,KAAiBC,EAAjB,KACA,EAAgDnM,qBAAhD,mBAAOoM,EAAP,KAAyBC,EAAzB,KACA,EAA0CrM,qBAA1C,mBAAOsM,EAAP,KAAsBC,EAAtB,KAsCA,OApCA9G,qBAAU,YACS,uCAAG,oCAAA7L,EAAA,sDACdkS,GACIU,EAAarT,UAAOsC,MAAMgR,eAAeX,EAAgBI,GACzDQ,EAAevT,UAAOsC,MAAMkR,OAAOC,SAASJ,GAE5B,kBAChBK,EADgB,kBACWb,EAE3Bc,EAAsBJ,EAAaK,WAAWF,GAC9CG,EAAmBF,EAAoBG,WAE7CZ,EAAoBW,IAEpBX,IAbgB,2CAAH,qDAgBjBa,KACC,CAACpB,EAAgBE,EAAqBE,IAEzCzG,qBAAU,YACc,uCAAG,4BAAA7L,EAAA,sDACvB,GAAIwS,EACF,IACQe,EAAuB,IAAIhU,UAAOiU,OAAOhB,GAC/C/R,QAAQC,IAAI6S,GACZZ,EAAiBY,EAAqBlW,SACtC,MAAOwG,GACPpD,QAAQC,IAAImD,GACZ8O,EAAiB,IARE,2CAAH,qDAYtBc,KACC,CAACjB,IAGF,gCACE,qBAAKnU,MAAO,CAAE4L,UAAW,GAAIb,MAAO,KAApC,SACE,0CAGF,qBAAK/K,MAAO,CAAE2N,QAAS,IAAvB,sBACA,cAAC,KAAM0H,SAAP,CACErV,MAAO,CAAE+K,MAAO,KAChBjL,KAAK,QACL0L,YAAY,oBACZ7K,SAAQ,uCAAE,WAAM6E,GAAN,SAAA7D,EAAA,sDACRmS,EAAkBtO,EAAErF,OAAOlB,OADnB,2CAAF,wDAKV,cAAC,KAAD,CACEe,MAAO,CAAE+K,MAAO,IAChB9L,MAAO8U,EACPpT,SAAU,SAAA6E,GACRwO,EAAuBxO,EAAErF,OAAOlB,QAElCa,KAAK,UAGP,cAAC,KAAMuV,SAAP,CACErV,MAAO,CAAE+K,MAAO,KAChBjL,KAAK,QACL0L,YAAY,oBACZ7K,SAAQ,uCAAE,WAAM6E,GAAN,SAAA7D,EAAA,sDACRuS,EAAY1O,EAAErF,OAAOlB,OADb,2CAAF,wDAKV,qBAAKe,MAAO,CAAE4L,UAAW,GAAIb,MAAO,KAApC,SACE,sCAGF,qBAAK/K,MAAO,CAAE2N,QAAS,IAAvB,yBACA,cAAC,KAAM0H,SAAP,CACEhF,SAAUwD,EACV7T,MAAO,CAAE+K,MAAO,KAChBjL,KAAK,QACLb,MAAOkV,EACP3I,YAAY,QACZ7K,SAAU,SAAA6E,GACR4O,EAAoB5O,EAAErF,OAAOlB,UAIjC,uBAECoV,EACC,sBAAKrU,MAAO,CAAE+K,MAAO,IAAKuF,OAAQ,KAAlC,UACE,qBAAKtQ,MAAO,CAAEqS,MAAO,QAASzG,UAAW,IAAzC,SACE,cAAChN,EAAD,CAASK,MAAOoV,MAElB,0BAGF,GAGF,qBAAKrU,MAAO,CAAEqS,MAAO,SAArB,SACE,eAAC,IAAD,CACErS,MAAO,CAAE4L,UAAW,IACpByE,UAAW8D,GAAqBN,GAAkBA,EAAerU,OAAS,EAC1EwJ,QAAS,WACP,IAAMsM,EAAoBrR,OAAOsR,aAAaC,QAAQ,kBAClDF,GACFrR,OAAOsR,aAAaE,QAAQ,wBAA0BC,KAAKC,MAAOL,GAGpE,IACE,IAAMJ,EAAuB,IAAIhU,UAAOiU,OAAOhB,EAAiB/E,QAChEhN,QAAQC,IAAI6S,GACZZ,EAAiBY,EAAqBlW,SACtCiF,OAAOsR,aAAaE,QAAQ,iBAAkBtB,GAC9ClQ,OAAO2R,SAASC,SAEhB,MAAOrQ,GACPpD,QAAQC,IAAImD,KAjBlB,UAqBE,sBAAMxF,MAAO,CAAE8Q,YAAa,GAA5B,0BArBF,YAyBF,eAAC,IAAD,CACE9Q,MAAO,CAAE4L,UAAW,IACpB5C,QAAS,WACP4K,GAAc,IAHlB,UAME,sBAAM5T,MAAO,CAAE8Q,YAAa,GAA5B,oBANF,eC7HN,IAAQpS,GAASC,IAATD,KA8BO,SAASyW,GAAOtW,GAC7B,MAA0CkJ,qBAA1C,mBAAO+N,EAAP,KAAsBC,EAAtB,KACAvI,qBAAU,WAAM,4CACd,4BAAA7L,EAAA,0DACM9C,EAAMkD,OADZ,gCAE6BlD,EAAMkD,OAAOiU,aAF1C,OAEUC,EAFV,OAGIF,EAAiBE,GAHrB,4CADc,uBAAC,WAAD,wBAOdD,KACC,CAACnX,EAAMkD,SAEV,IAyCI4E,EACAuP,EACAC,EA3CEC,EAAkBvX,EAAMG,SAAW8W,EAEzC,EAAwB/N,qBAAxB,mBAAO7D,EAAP,KAAamS,EAAb,KACA,EAAoBtO,qBAApB,mBAAOuO,EAAP,KAAWC,EAAX,KACA,EAA4BxO,qBAA5B,mBAAOyO,EAAP,KAAeC,EAAf,KACA,EAAkC1O,qBAAlC,mBAAO2O,EAAP,KAAkBC,EAAlB,KACA,EAAoB5O,qBAApB,mBAAO6O,EAAP,KAAWC,EAAX,KAEA,EAAoC9O,qBAApC,mBAAO+O,EAAP,KAAmBlD,EAAnB,KAEMmD,EAAelY,EAAMiD,SACzB,cAAC,KAAD,CAAS8M,MAAM,SAAf,SACE,cAACoI,GAAA,EAAD,CACEhO,QAAS,WACPqN,GAASnS,IAEX+S,QAAS,GACTjX,MAAO,CACL8I,QAASjK,EAAMiK,QAAUjK,EAAMiK,QAAU,EACzC5I,MAAOrB,EAAMqB,MAAQrB,EAAMqB,MAAQ,GACnC6I,OAAQ,UACRtI,SAAU5B,EAAMiB,KAAOjB,EAAMiB,KAAO,GACpCG,cAAe,cAKrB,GAGIiX,EACJ,eAAC,IAAD,CACElX,MAAO,CAAE4L,UAAW,IACpB5C,QAAS,WACP4K,GAAc,IAHlB,UAME,sBAAM5T,MAAO,CAAE8Q,YAAa,GAA5B,0BANF,YAaF,GAAIwF,EACF3P,EACE,gCACE,8BACE,cAAC,GAAD,CAAM9F,UAAQ,EAAd,SAAgBuV,MAElB,cAAC,KAAD,CACEnX,MAAOmX,EACPtW,KAAK,MACLqX,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,QAIjCrB,EACE,eAAC,IAAD,CAEElN,QAAS,WACPuN,EAAM,KAHV,UAME,cAACxK,GAAA,EAAD,IANF,UACM,QAQRoK,EACE,eAAC,IAAD,CAEEnN,QAAS,WACP6N,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACiB,GAAA,EAAD,IAPF,iBACM,aASH,GAAIZ,EAAI,CACb,IAAMA,EAAKrB,aAAaC,QAAQ,kBAC1BiC,EAAS,IAAIvW,UAAOiU,OAAOyB,GAEjC,GAAIa,EAAOzY,UAAYoX,EACrBzP,EACE,8BACE,8EAGC,CACL,IAAM+Q,EAAsB,GACtBC,EAAiB,GASvB,IAAK,IAAM1Q,KARXyQ,EAAoBD,EAAOzY,UAAW,EACtC2Y,EAAe9H,KACb,qBAAK7P,MAAO,CAAES,SAAU,GAAIqI,QAAS,EAAG8O,gBAAiB,WAAzD,SACE,oBAAGxX,KAAM,OAASwW,EAAlB,UACE,cAAChY,EAAD,CAASmB,WAAS,EAACf,QAASyY,EAAOzY,QAASI,YAAaP,EAAMO,cADjE,IACkFqY,EAAOzY,QAAQa,OAAO,EAAG,SAI7F0V,aAChB,GAAItO,EAAIpD,QAAQ,0BAA4B,EAAG,CAC7C,IAAMgU,EAAStC,aAAaC,QAAQvO,GAC9B6Q,EAAa,IAAI5W,UAAOiU,OAAO0C,GAChCH,EAAoBI,EAAW9Y,WAClC0Y,EAAoBI,EAAW9Y,UAAW,EAC1C2Y,EAAe9H,KACb,qBAAK7P,MAAO,CAAES,SAAU,IAAxB,SACE,oBAAGL,KAAM,OAASyX,EAAlB,UACE,cAACjZ,EAAD,CAASmB,WAAS,EAACf,QAAS8Y,EAAW9Y,QAASI,YAAaP,EAAMO,cAAgB,IAClF0Y,EAAW9Y,QAAQa,OAAO,EAAG,UAQ1C,IAAMkY,EAAW,4BAA8BnB,EAE/CjQ,EACE,gCACE,gCACE,6CACA,8BACE,cAAC,GAAD,CAAM3G,MAAO,CAAES,SAAU,IAAMI,UAAQ,EAAvC,SACG+V,MAIL,sBAAK5W,MAAO,CAAE4L,UAAW,IAAzB,UACE,8BACE,+CAEF,cAAC,GAAD,CAAM5L,MAAO,CAAES,SAAU,IAAMI,UAAQ,EAAvC,SACGkX,OAIL,uBACA,mFAEE,mBAAG5X,OAAO,SAASC,KAAM2X,EAAU1X,IAAI,sBAAvC,yBAFF,OAQA,qBACEL,MAAO,CAAE+I,OAAQ,WACjBC,QAAS,WACP,IAAMgP,EAAKC,SAASC,cAAc,YAClCF,EAAG/Y,MAAQ8Y,EACXE,SAAS5S,KAAK8S,YAAYH,GAC1BA,EAAGI,SACHH,SAASI,YAAY,QACrBJ,SAAS5S,KAAKiT,YAAYN,GAC1B3T,KAAQkU,QAAQ,sBAAMvY,MAAO,CAAE4K,SAAU,YAAzB,uCATpB,SAYE,cAAC,KAAD,CAAI3L,MAAO8Y,EAAUjY,KAAK,MAAMqX,MAAM,IAAIC,eAAa,EAACC,SAAS,aAIpEM,EACC,gCACE,qDACCA,EACD,cAAC,IAAD,CACE3O,QAAS,WACP,IAAMsM,EAAoBrR,OAAOsR,aAAaC,QAAQ,kBAClDF,GACFrR,OAAOsR,aAAaE,QAAQ,wBAA0BC,KAAKC,MAAOL,GAEpE,IACMN,EADe9T,UAAOiU,OAAOqD,eACHC,cAAczD,WAC9C/Q,OAAOsR,aAAaE,QAAQ,iBAAkBT,GAC9C/Q,OAAO2R,SAASC,UATpB,yBAgBF,MAMRK,EACE,eAAC,IAAD,CAEElN,QAAS,WACPuN,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAC9K,GAAA,EAAD,IAPF,aACM,WASRoK,EACE,eAAC,IAAD,CAEEnN,QAAS,WACP6N,EAAM,IACNN,EAAM,KAJV,UAOE,cAACiB,GAAA,EAAD,IAPF,UACM,YASH,CACL,IAAMkB,EAAa,CACjB5P,QAAS,IAGXnC,EACE,gCACE,qBAAK3G,MAAO0Y,EAAZ,SACE,cAACzO,GAAD,CACEsB,WAAS,EACTnM,YAAaP,EAAMO,YACnBoM,YAAY,aACZxM,QAAS0X,EACT/V,SAAUgW,MAGd,qBAAK3W,MAAO0Y,EAAZ,SACE,cAACnG,GAAD,CACE3J,MAAO/J,EAAM+J,MACb3J,MAAOuX,EACP7V,SAAU,SAAA1B,GACRwX,EAAUxX,WAMpBiX,EACE,eAAC,IAAD,CAEElN,QAAS,WACPuN,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAC9K,GAAA,EAAD,IAPF,aACM,WASRoK,EACE,eAAC,IAAD,CAEEnN,QAAS,WACP6N,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACiB,GAAA,EAAD,IAPF,iBACM,QAWV,OACE,iCACGT,EACD,cAAC,KAAD,CACE4B,QAASzU,EACT0K,MACE,gCACGwH,EAAkB,cAACxX,EAAD,CAASI,QAASoX,EAAiBhX,YAAaP,EAAMO,cAAkB,cAAC,KAAD,IAC3F,qBAAKY,MAAO,CAAEqS,MAAO,QAASzE,aAAc,IAA5C,SACE,cAAC9F,EAAD,CAAS9I,QAASoX,EAAiBtU,SAAUjD,EAAMiD,SAAU+G,iBAAkBhK,EAAM+J,aAI3FgQ,KAAM,WACJrC,IACAM,IACAR,GAASnS,IAEX2U,SAAU,WACRtC,IACAM,IACAR,GAASnS,IAEX4U,OACEhC,EACI,KACA,CACEI,EACAf,EACAD,EACA,eAAC,IAAD,CAEErI,KAAK,UACLwC,UAAWmG,IAAWE,GAAaJ,EACnChE,SAAS,EACTtJ,QAAS,WACP,IAEI/J,EAFEwC,EAAKJ,EAAWxC,EAAMkD,QAAUlD,EAAMiD,UAG5C,IACE7C,EAAQiC,UAAOsC,MAAM2L,WAAW,GAAKqH,GACrC,MAAOhR,GAEPvG,EAAQiC,UAAOsC,MAAM2L,WAAW,GAAK7G,WAAWkO,GAAQ9N,QAAQ,IAGlEjH,EAAG,CACDsX,GAAIrC,EACJzX,UAEFoX,GAASnS,GACTqS,KArBJ,UAwBE,cAACyC,GAAA,EAAD,IAxBF,UACM,WA5BhB,SAwDGlC,EAAa,cAACnD,GAAD,CAAcC,cAAeA,IAAoBjN,OCpXvE,IAAQnD,GAAUrC,EAAQ,IAAlBqC,MA8BO,SAASyV,GAAOpa,GAC7B,IAeIqa,EAfJ,EAA8BnR,qBAA9B,mBAAO/I,EAAP,KAAgBma,EAAhB,KACA,EAA0CpR,qBAA1C,mBAAOqR,EAAP,KAAsBC,EAAtB,KAEQzQ,EAAmD/J,EAAnD+J,MAAO4C,EAA4C3M,EAA5C2M,YAAarC,EAA+BtK,EAA/BsK,cAAe/J,EAAgBP,EAAhBO,YAE3CoO,qBAAU,YACc,uCAAG,4BAAA7L,EAAA,0DACnBwH,EADmB,gCAEQA,EAAcmQ,eAFtB,OAEfC,EAFe,OAGrBF,EAAiBE,EAAe,IAHX,2CAAH,qDAMtBC,KACC,CAACrQ,IAIF+P,EADEla,GAA0C,oBAAxBA,EAAQuB,YAClB,cAAC,IAAD,CAAUD,KAAMtB,EAAQuB,cAAeT,KAAM,EAAGU,MAAO,IAEvD,wBAGZ,IAMMiB,EAAKJ,EAAW8H,GAEtB,OACE,+BACE,cAAC,KAAD,CACErJ,KAAK,QACL0L,YAAaA,GAA4B,eACzCC,OAAQyN,EACRja,MAAOD,EACP2B,SAAU,SAAA6E,GAfM,IAAAgF,EACI,qBADJA,EAeahF,EAAErF,OAAOlB,QAdHuE,GAAMkI,UAAUlB,IACrD2O,EAAW3O,IAcT+E,OACE,eAAC,KAAD,CAASX,MAAM,0CAAf,UACE,cAAC,IAAD,CACE5F,QAAS,WACPvH,EAAG,CACDsX,GAAI/Z,EACJC,MAAOuE,GAAM2L,WAAW,SAE1BgK,EAAW,KAEbtP,MAAM,SACNiE,KAAM,cAACkL,GAAA,EAAD,MAER,cAAC7D,GAAD,CACEjV,MAAM,UACN4B,SAAUqH,EACV/J,YAAaA,EACbwJ,MAAOA,EACP5J,QAASoa,WCzER,SAASK,GAAS5a,GAC/B,OACE,eAAC,IAAD,CACEmK,QAAS,WACP/E,OAAOC,KAAK,gCAEdpE,KAAK,QACL+J,MAAM,QALR,UAOE,sBAAM7J,MAAO,CAAE8Q,YAAa,GAA5B,SACE,sBAAMC,KAAK,MAAM,aAAW,WAA5B,4BAIyB,qBAAnBlS,EAAM0C,SAA2B,EAAImY,SAAS7a,EAAM0C,SAAU,IAAzB,SAA+B,GAAM,GAZpF,O,6CCpBIoY,GAAgBhb,IAAhBgb,MAAOjb,GAASC,IAATD,KAIA,SAASkb,GAAT,GAAsD,IAApCC,EAAmC,EAAnCA,KAAMjL,EAA6B,EAA7BA,MAAOkL,EAAsB,EAAtBA,SAAajb,EAAS,mBAClE,OACE,sBAAKmB,MAAO,CAAE2G,QAAS,OAAQoT,eAAgB,gBAAiBjR,QAAS,UAAzE,UACE,sBAAK9I,MAAO,CAAE2G,QAAS,OAAQqT,cAAe,SAAUC,KAAM,EAAGC,WAAY,SAA7E,UACE,mBAAG9Z,KAAMyZ,EAAM1Z,OAAO,SAASE,IAAI,sBAAnC,SACE,cAACsZ,GAAD,CAAOxC,MAAO,EAAGnX,MAAO,CAAEqP,OAAQ,gBAAlC,SACGT,MAGL,cAAC,GAAD,CAAMf,KAAK,YAAY7N,MAAO,CAAE0N,UAAW,QAA3C,SACGoM,OAGJjb,EAAMsb,YAKbP,GAAOQ,aAAe,CACpBP,KAAM,GACNjL,MAAO,2BACPkL,SAAU,iB,yBCDG,SAASO,GAAKxb,GAC3B,MAA8BkJ,mBAAS,QAAvC,mBAAOuS,EAAP,KAAgBC,EAAhB,KAEM1M,EAAO,UAEP2M,EAAa,GALe,WAMvBC,GACyB,QAA9B5b,EAAM6b,SAASD,GAAG7X,SAAmD,IAA9B/D,EAAM6b,SAASD,GAAG7X,SAC3D4X,EAAW3K,KACT,4BACE,cAAC,IAAD,CACE7P,MAAO,CAAEE,MAAOrB,EAAM6b,SAASD,GAAGva,OAClC2N,KAAMA,EACN/N,KAAK,QACL+J,MAAM,QACNb,QAAS,WACP/E,OAAOC,KAAKrF,EAAM6b,SAASD,GAAGE,SANlC,SASG9b,EAAM6b,SAASD,GAAGrX,QAVfvE,EAAM6b,SAASD,GAAG7X,WAHhC,IAAK,IAAM6X,KAAK5b,EAAM6b,SAAW,EAAtBD,GAoBX,OACE,gCACE,eAAC,IAAD,CACE3a,KAAK,QACL+J,MAAM,QACNb,QAAS,WACPuR,EAAW,OAJf,UAOE,cAACK,GAAA,EAAD,CAAsB5a,MAAO,CAAEE,MAAO,aAAgB,IAC9B,qBAAhBrB,EAAM+J,MAAwB,EAAI/J,EAAM+J,MAAMF,QAAQ,MAEhE,eAAC,KAAD,CACEkG,MAAM,UACN+J,QAAqB,OAAZ2B,EACTzB,SAAU,WACR0B,EAAW,SAEbzB,OAAQ,CACN,cAAC,IAAD,CAEE9P,QAAS,WACPuR,EAAW,SAHf,mBACM,SARV,UAiBE,4BACE,eAAC,IAAD,CACE1M,KAAMA,EACN/N,KAAK,QACL+J,MAAM,QACNb,QAAS,WACP/E,OAAOC,KAAK,2EAA6ErF,EAAMG,UALnG,UAQE,sBAAMgB,MAAO,CAAE4N,aAAc,IAAMmD,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCATJ,YAgBF,8BACG,IACD,eAAC,IAAD,CACElD,KAAMA,EACN/N,KAAK,QACL+J,MAAM,QACNb,QAAS,WACP,IAAI6R,KAAe,CACjBC,YAAa,eACbC,YAAa,0CACbC,WAAY,qBACZC,UAAW,MACXC,YAAarc,EAAMG,UAElB+E,GAAG,KAAK,SAAAuL,GAAK,OAAIlN,QAAQC,IAAIiN,MAC7B8B,QAbP,UAgBE,sBAAMpR,MAAO,CAAE4N,aAAc,IAAMmD,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCAjBJ,aAyBF,4BACE,eAAC,IAAD,CACElD,KAAMA,EACN/N,KAAK,QACL+J,MAAM,QACNb,QAAS,WACP/E,OAAOC,KAAK,0CALhB,UAQE,sBAAMlE,MAAO,CAAE4N,aAAc,IAAMmD,KAAK,MAAM,aAAW,OAAzD,0BARF,gBAeF,cAAC,KAAD,IAEA,6CAECyJ,Q,kFC/IT,IAAMW,GAAc,uCAAG,WAAMC,GAAN,eAAAzZ,EAAA,6DACf0Z,EAAI,IAAIna,UAAOoa,UAAUC,sBAAsBH,GADhC,SAGfC,EAAEG,MAHa,gCAKdH,GALc,2CAAH,sDAQL,SAASI,GAAiBC,GAAiC,IAAvBvS,EAAsB,uDAAN,KACjE,EAAgCpB,mBAAS,MAAzC,mBAAOjG,EAAP,KAAiB6Z,EAAjB,KAEMC,EAAkBrR,sBAAW,sBAAC,8BAAA5I,EAAA,+EAEhB2B,QAAQuY,KAAKH,EAAS7O,IAAIsO,KAFV,cAE1BE,EAF0B,gBAGfA,EAHe,OAG1BS,EAH0B,OAKhCH,EAAYG,GALoB,kDAQhC1Z,QAAQC,IAAR,MARgC,0DAUjC,CAACqZ,IAcJ,OAZAlO,qBAAU,WAEJrE,GAAqD,KAAvB,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAevB,SAAShF,SAC3C+Y,EAAYxS,GAIdyS,MAGC,CAAC1W,KAAKE,UAAUsW,GAAWvS,IAEvBrH,ECrCwB,6CCuBdia,KAAXC,OACSrd,IAATD,KA2pBOud,I,WChrBA,SAASC,KACtB,IAAMjW,EAAQhC,OAAOsR,aAAaC,QAAQ,SAC1C,EAAoCzN,sBAAY9B,GAAmB,UAAVA,IAAzD,mBAAOkW,EAAP,KAAmBC,EAAnB,KACA,EAA2Crd,cAAnCsd,EAAR,EAAQA,SAAUvd,EAAlB,EAAkBA,aAAcwd,EAAhC,EAAgCA,OAEhC9O,qBAAU,WACRvJ,OAAOsR,aAAaE,QAAQ,QAAS3W,KACpC,CAACA,IAOJ,OACE,sBAAK6R,UAAU,eAAe3Q,MAAO,CAAE4K,SAAU,QAAS2R,MAAO,EAAGC,OAAQ,GAA5E,UACE,sBAAMxc,MAAO,CAAE8I,QAAS,GAAxB,SAA+C,UAAjBhK,EAA2B,eAAO,iBAChE,cAAC,KAAD,CAAQ2d,QAASN,EAAYxb,SARb,SAAA+b,GAClBN,EAAcM,GACdL,EAAS,CAAEpW,MAAOyW,EAAYJ,EAAOK,KAAOL,EAAOM,c,wBCVtCje,IAATD,K,mDC8NR,I,WC5Heme,OAlGf,YAOI,IANFC,EAMC,EANDA,aACAC,EAKC,EALDA,aACAC,EAIC,EAJDA,gBACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,qBAGIC,GADH,EADD3T,kBAEqB,IACrB,GAAIsT,GAAgBC,GAAgBC,GAAmBD,IAAiBC,EAAiB,CACvF,IAAMI,EAAkBC,YAAQL,GAC1BM,EAAeD,YAAQN,GAE3BI,EADsB,OAApBH,GAA6C,QAAjBD,EAE5B,qBAAK/c,MAAO,CAAE2K,OAAQ,EAAGC,SAAU,WAAY2R,MAAO,EAAGzR,IAAK,GAAIhC,QAAS,IAA3E,SACE,cAAC,KAAD,CACEzE,QAAQ,gCACRC,YACE,4CACW,8CADX,+CAC2E,sCAD3E,yBAGE,6FAGJuJ,KAAK,QACL0P,UAAU,MAMd,qBAAKvd,MAAO,CAAE2K,OAAQ,EAAGC,SAAU,WAAY2R,MAAO,EAAGzR,IAAK,GAAIhC,QAAS,IAA3E,SACE,cAAC,KAAD,CACEzE,QAAQ,6BACRC,YACE,4CACW,4BAAI8Y,GAAmBA,EAAgBha,OADlD,kCAC2F,IACzF,cAAC,IAAD,CACE4F,QAAO,sBAAE,gCAAArH,EAAA,6DACD6b,EAAWvZ,OAAOuZ,SAClBxY,EAAO,CACX,CACEpC,QAAS,KAAOqa,EAAcra,QAAQ6a,SAAS,IAC/CC,UAAWT,EAAc7Z,KACzBua,eAAgBV,EAAcU,eAC9BC,QAAS,CAACX,EAAcY,QACxBC,kBAAmB,CAACb,EAAcvd,iBAGtC0C,QAAQC,IAAI,OAAQ2C,GAXb,kBAgBYwY,EAASO,QAAQ,CAChCC,OAAQ,6BACRC,OAAQ,CAAC,CAAErb,QAASoC,EAAK,GAAGpC,YAlBzB,OAgBLsb,EAhBK,kFAuBcV,EAASO,QAAQ,CAChCC,OAAQ,0BACRC,OAAQjZ,IAzBP,QAuBHkZ,EAvBG,kEAgCHA,GACF9b,QAAQC,IAAI6b,GAjCP,iEADX,SAsCE,4BAAIZ,GAAgBA,EAAala,YAIvCyK,KAAK,QACL0P,UAAU,WAMlBJ,EAAiBD,EAAuB,KACtC,qBAAKld,MAAO,CAAE2K,QAAS,EAAGC,SAAU,WAAY2R,MAAO,IAAKzR,IAAK,GAAIhC,QAAS,GAAI5I,MAAO+c,EAAc/c,OAAvG,SACG+c,EAAc7Z,OAOrB,OAFAhB,QAAQC,IAAI,CAAE8a,mBAEPA,GChDMgB,OA7Cf,YAAgE,IAA1ChV,EAAyC,EAAzCA,cAAe8T,EAA0B,EAA1BA,cAAeje,EAAW,EAAXA,QAClD,EAA0C+I,oBAAS,GAAnD,mBAAOqW,EAAP,KAAsBC,EAAtB,KAEMnW,EAA2BP,EAAewB,GAG1CmV,EAAmBlW,YAAWe,EAAenK,EAASkJ,GAMtDqW,EAAWld,EAAW8H,EAHXqV,YAAYvB,EAAe,OAAQ/U,IAKhDuW,EAAa,GA4BjB,OAzBGL,GACDjV,GACAA,EAAcvB,UACqB,QAAnCuB,EAAcvB,SAAShF,SACvB0b,GACApd,UAAOsC,MAAMiF,YAAY6V,IAAqB,IAE9CG,EACE,qBAAKze,MAAO,CAAE4K,SAAU,WAAY2R,MAAO,GAAIzR,IAAK,IAApD,SACE,cAAC,IAAD,CACE+C,KAAK,UACL7E,QAAS,WACPuV,EAAS,CACPxF,GAAI/Z,EACJC,MAAOiC,UAAOsC,MAAM2L,WAAW,UAEjCkP,GAAiB,IAPrB,qEAgBCI,G,8CCjDM,OAA0B,iCCA1B,OAA0B,iCCA1B,OAA0B,iCCA1B,OAA0B,iCCA1B,OAA0B,iCCA1B,OAA0B,iCCA1B,OAA0B,iC,OCiE1BC,OA7Cf,WAGE,OACE,cAAC,IAAD,CAAK1e,MAAO,CAAE8I,QAAS,QAAvB,SACE,eAAC,IAAD,CAAK2E,KAAM,GAAX,UACE,uEACA,qEACA,yDACA,0IACA,qBAAKkD,UAAU,YAAYgO,IAAKC,GAAMC,IAAI,KAC1C,6JACA,qBAAKlO,UAAU,YAAYgO,IAAKG,GAAMD,IAAI,KAC1C,+EACA,qBAAKlO,UAAU,YAAYgO,IAAKI,GAAMF,IAAI,KAC1C,iCACE,sEACA,4CACA,wEACA,iIAEF,0DACA,+HACA,8CACA,uOAEE,mBAAG7e,MAAO,CAAEE,MAAO,OAAnB,oFAEF,qBAAKyQ,UAAU,YAAYgO,IAAKK,GAAMH,IAAI,KAC1C,qBAAKlO,UAAU,YAAYgO,IAAKM,GAAMJ,IAAI,KAC1C,yCACA,6UAGA,qBAAKlO,UAAU,YAAYgO,IAAKO,GAAML,IAAI,KAC1C,qBAAKlO,UAAU,YAAYgO,IAAKQ,GAAMN,IAAI,KAC1C,6CACA,4BACE,iJ,4CCnDK,SAASO,GAAT,GAUX,IATF1L,EASC,EATDA,QACA1U,EAQC,EARDA,QACAqK,EAOC,EAPDA,gBACAF,EAMC,EANDA,cACAmV,EAKC,EALDA,iBACA1V,EAIC,EAJDA,MACAnH,EAGC,EAHDA,GACA4d,EAEC,EAFDA,cACAC,EACC,EADDA,eAEA,EAAoCvX,mBAAS,cAA7C,mBAAOwX,EAAP,KAAmBC,EAAnB,KAEA,OACE,gCAIE,sBAAKxf,MAAO,CAAEyf,OAAQ,oBAAqB3W,QAAS,GAAIiC,MAAO,IAAKsE,OAAQ,OAAQzD,UAAW,IAA/F,UACE,6CACA,2CAAc8H,KACd,cAAC,KAAD,IACA,sBAAK1T,MAAO,CAAEqP,OAAQ,GAAtB,UACE,cAAC,KAAD,CACE1O,SAAU,SAAA6E,GACRga,EAAcha,EAAErF,OAAOlB,UAG3B,cAAC,IAAD,CACEe,MAAO,CAAE4L,UAAW,GACpB5C,QAAO,sBAAE,4BAAArH,EAAA,6DAGD4B,EAAS9B,EAAG6d,EAAeI,aAAaC,WAAWJ,IAAa,SAAAK,GACpExd,QAAQC,IAAI,mCAA0Bud,IAClCA,GAA6B,cAAlBA,EAAOC,QAA4C,IAAlBD,EAAOC,SACrDzd,QAAQC,IAAI,6BAAqBud,EAAO3c,KAAO,cAC/Cb,QAAQC,IACN,iBACEud,EAAOE,QACP,KACCF,EAAOlc,UAAYkc,EAAOG,KAC3B,MACAzX,WAAWsX,EAAOre,UAAY,IAC9B,aAIRa,QAAQC,IAAI,2CAA4CkB,GAlBjD,KAmBPnB,QAnBO,SAmBWmB,EAnBX,wBAmBClB,IAnBD,2DAFX,6BA2BF,cAAC,KAAD,IArCF,gBAuCE,cAACzD,EAAD,CAASI,QAASA,EAASI,YAAaiK,EAAiB5I,SAAU,KACnE,cAAC,KAAD,IAxCF,uBA0CE,cAAC7B,EAAD,CACEI,QAAQ,6CACRI,YAAaiK,EACb5I,SAAU,KAEZ,cAAC,KAAD,IAEA,gDAAmB6d,EAAmB9a,SAAMiF,YAAY6V,GAAoB,SAC5E,qCACA,cAACxW,EAAD,CAAS9I,QAASA,EAAS8C,SAAUqH,EAAeP,MAAOA,IAC3D,cAAC,KAAD,IACA,sEACA,cAACd,EAAD,CAASK,QAAS3E,SAAM2L,WAAW,QAASrN,SAAUqH,EAAeP,MAAOA,IAC5E,cAAC,KAAD,IAEA,gDAAmB0V,EAAmB9a,SAAMiF,YAAY6V,GAAoB,SAC5E,cAAC,KAAD,IA1DF,yBA4DE,cAAC1f,EAAD,CACEI,QAASqgB,GAAiBA,EAAcK,aAAeL,EAAcK,aAAa1gB,QAAU,KAC5FI,YAAaiK,EACb5I,SAAU,KAEZ,cAAC,KAAD,IACA,qBAAKT,MAAO,CAAEqP,OAAQ,GAAtB,SACE,cAAC,IAAD,CACErG,QAAS,WAEPvH,EAAG6d,EAAeI,aAAaC,WAAW,yBAH9C,oDASF,qBAAK3f,MAAO,CAAEqP,OAAQ,GAAtB,SACE,cAAC,IAAD,CACErG,QAAS,WAKPvH,EAAG,CACDsX,GAAIuG,EAAeI,aAAa1gB,QAChCC,MAAOuE,SAAM2L,WAAW,YAR9B,0BAgBF,qBAAKnP,MAAO,CAAEqP,OAAQ,GAAtB,SACE,cAAC,IAAD,CACErG,QAAS,WAEPvH,EACE6d,EAAeI,aAAaC,WAAW,oCAA2B,CAChE1gB,MAAOuE,SAAM2L,WAAW,aALhC,sCAcF,qBAAKnP,MAAO,CAAEqP,OAAQ,GAAtB,SACE,cAAC,IAAD,CACErG,QAAS,WAEPvH,EAAG,CACDsX,GAAIuG,EAAeI,aAAa1gB,QAChCC,MAAOuE,SAAM2L,WAAW,SACxBnK,KAAMsa,EAAeI,aAAa5N,UAAUkO,mBAAmB,qBAAsB,CACnF,kCAPR,kCAsBJ,cAACnN,GAAD,CACEvB,UAAW+N,EACXvM,aAAa,eACbC,UAAU,aACV5J,cAAeA,EACfE,gBAAiBA,EACjB2J,WAAY,IAGd,sBAAKhT,MAAO,CAAE+K,MAAO,IAAKsE,OAAQ,OAAQzD,UAAW,GAAIuH,cAAe,KAAxE,UACE,eAAC,KAAD,+BACoB,IAClB,mBACE/S,KAAK,gGACLD,OAAO,SACPE,IAAI,sBAHN,wCASF,eAAC,KAAD,CAAML,MAAO,CAAE4L,UAAW,IAA1B,UACE,qFACqD,IACnD,mBAAGxL,KAAK,0CAA0CD,OAAO,SAASE,IAAI,sBAAtE,qCAEK,IAJP,UAQA,qBAAKL,MAAO,CAAE4L,UAAW,GAAzB,SACE,cAAC,IAAD,CAAQiC,KAAK,UAAb,uBAGF,sBAAK7N,MAAO,CAAE4L,UAAW,GAAzB,UACE,cAACqU,GAAA,EAAD,CAAcC,MAAI,IADpB,YAIA,sBAAKlgB,MAAO,CAAE4L,UAAW,GAAzB,0BAEE,qBAAK5L,MAAO,CAAE4L,UAAW,GAAzB,SACE,cAAC,KAAD,CAAYjL,SAAU,oBAI1B,qBAAKX,MAAO,CAAE4L,UAAW,IAAzB,SACE,cAAC,KAAD,CAAQuU,OAAK,EAAChQ,aAAc,CAAC,GAAI,IAAKxP,SAAU,iBAGlD,qBAAKX,MAAO,CAAE4L,UAAW,IAAzB,SACE,cAAC,KAAD,CAAQwU,gBAAc,EAACzf,SAAU,iBAGnC,qBAAKX,MAAO,CAAE4L,UAAW,IAAzB,SACE,cAAC,KAAD,CAAUyU,QAAS,GAAIR,OAAO,aAGhC,qBAAK7f,MAAO,CAAE4L,UAAW,IAAzB,SACE,cAAC,KAAD,eC/MZ,IAAQoQ,GAAWD,KAAXC,OAEO,SAASsE,GAAT,GAAuE,IAAtDhC,EAAqD,EAArDA,iBAAkBjV,EAAmC,EAAnCA,gBAAiBT,EAAkB,EAAlBA,MAAO5J,EAAW,EAAXA,QAExE,EAA0C+I,mBAAS,iBAAnD,mBAAOwY,EAAP,KAAsBC,EAAtB,KACMC,EAAeC,YACnB,2FAGF,OACE,gCACE,sBAAK1gB,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,aAEY,yCAFZ,MAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,2CAQF,sBAAK7Q,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BACA,+CAFF,QAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,gCAQF,sBAAK7Q,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,QAEO,mDAFP,oDAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,kDAQF,sBAAK7Q,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,aAEY,yCAFZ,MAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,6CAQF,sBAAK7Q,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,cAGE,sBACEH,UAAU,YACV3Q,MAAO,CACL4J,WAAY,EACZkH,YAAa,EAEbhI,QAAS,EACT8H,aAAc,EACdC,WAAY,UARhB,gCAHF,MAiBE,sBACEF,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,wCAQF,sBAAK7Q,MAAO,CAAE4L,UAAW,IAAzB,6BAEE,sBACE+E,UAAU,YACV3Q,MAAO,CAAEqP,OAAQ,EAAqCvG,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFjG,0BAKQ,IAPV,qCAQoC,4BAAIrN,SAAMiF,YAAY6V,GAAoB,QAG9E,sBAAKte,MAAO,CAAEqP,OAAQ,GAAtB,UACE,gCACE,+CADF,uCAC4D,IAC1D,mBAAGjP,KAAK,yBAAyBD,OAAO,SAASE,IAAI,sBAArD,gCAIF,cAAC,KAAD,CACEsgB,YAAU,EACV1hB,MAAOshB,EACP5f,SAAU,SAAA1B,GACRmD,QAAQC,IAAR,mBAAwBpD,IACxBuhB,EAAiBvhB,IAEnB2hB,aAAc,SAAC3S,EAAO4S,GAAR,OAAmBA,EAAO1G,SAAS5Z,cAAcsD,QAAQoK,EAAM1N,gBAAkB,GAC/FugB,iBAAiB,WARnB,SAUGL,EAAa5T,KAAI,SAAAkU,GAAK,OACrB,cAAC,GAAD,CAAiD9hB,MAAO8hB,EAAMC,OAA9D,SACGD,EAAMC,QADID,EAAM/hB,QAAU,IAAM+hB,EAAMC,gBAO/C,sBAAKhhB,MAAO,CAAE4L,UAAW,IAAzB,+EAEE,sBACE+E,UAAU,YACV3Q,MAAO,CAAEqP,OAAQ,EAAqCvG,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFjG,SAIG,oBANL,aASE,qBAAK7Q,MAAO,CAAE+K,MAAO,IAAKjC,QAAS,GAAIuG,OAAQ,QAA/C,SACE,cAACpF,GAAD,CAAc7K,YAAaiK,MAE7B,0GAGF,sBAAKrJ,MAAO,CAAE4L,UAAW,IAAzB,gDAEE,sBACE+E,UAAU,YACV3Q,MAAO,CAAEqP,OAAQ,EAAqCvG,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFjG,mBAKQ,IAPV,0BASE,sBACEF,UAAU,YACV3Q,MAAO,CAAEqP,OAAQ,EAAqCvG,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFjG,sBAKQ,IAdV,gCAe+B,kCAAKjI,QAGpC,sBAAK5I,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,WAEU,uCAFV,oBAGE,uBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,UAIE,cAACjS,EAAD,CAASI,QAASA,EAASe,WAAS,IAJtC,IAI2Cf,QAI7C,sBAAKgB,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,4CAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,gDAHF,cAUE,sBACEF,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,gCAQF,sBAAK7Q,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BACA,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,+BAFF,oCASE,sBACEF,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,8BAMA,sBAAK7Q,MAAO,CAAE4L,UAAW,GAAzB,iBACO,IACL,sBACE+E,UAAU,YACV3Q,MAAO,CACL4J,WAAY,EACsBd,QAAS,EAC3C8H,aAAc,EACdC,WAAY,UANhB,8BAUQ,IAZV,iDAiBF,sBAAK7Q,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,sBAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,+BAQF,sBAAK7Q,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,WAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,4BAHF,KAUE,sBACEF,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,yBAVF,KAiBE,sBACEF,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,8BAQF,sBAAK7Q,MAAO,CAAE4L,UAAW,IAAzB,UACE,sBAAM5L,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,yBAGE,sBACEH,UAAU,YACV3Q,MAAO,CAAE4J,WAAY,EAAqCd,QAAS,EAAG8H,aAAc,EAAGC,WAAY,UAFrG,SAIE,mBAAG1Q,OAAO,SAASE,IAAI,sBAAsBD,KAAK,+CAAlD,gCAKJ,qBAAKJ,MAAO,CAAE8I,QAAS,KAAvB,mH,qEChQAmY,GAAY,CAChBrX,WAAY,EACZkH,YAAa,EACqBhI,QAAS,EAC3C8H,aAAc,EACdC,WAAY,UA2LCqQ,OAxLf,SAAkBriB,GAShB,IAAMsiB,EAAe,+OAiBfC,EAAcC,aAAIF,GACxB,EAA0BG,aAASF,EAAa,CAAEG,aAAc,OAAxDjP,EAAR,EAAQA,QAAStN,EAAjB,EAAiBA,KAEXwc,EAAiB,CACrB,CACE5S,MAAO,UACP6S,UAAW,UACXxa,IAAK,WAEP,CACE2H,MAAO,SACP3H,IAAK,KACLya,OAAQ,SAAAC,GAAM,OAAI,cAAC/iB,EAAD,CAASK,MAAO0iB,EAAOlO,OAAO3M,GAAI1H,YAAaP,EAAMwK,gBAAiB5I,SAAU,OAEpG,CACEmO,MAAO,YACP3H,IAAK,YACLwa,UAAW,YACXC,OAAQ,SAAAE,GAAC,OAAI,IAAIlM,KAAS,IAAJkM,GAAUC,iBAIpC,EAAoC9Z,mBAAS,cAA7C,mBAAOwX,EAAP,KAAmBC,EAAnB,KAEMsC,EACJ,qBAAK9hB,MAAO,CAAE4L,UAAW,EAAG9C,QAAS,GAArC,wEAGF,OACE,qCACE,sBAAK9I,MAAO,CAAEqP,OAAQ,OAAQzD,UAAW,IAAzC,gEACsD,IACpD,sBAAM+E,UAAU,YAAY3Q,MAAOihB,GAAnC,8BAEQ,IAJV,iDAOA,sBAAKjhB,MAAO,CAAEqP,OAAQ,OAAQzD,UAAW,IAAzC,iCACuB,IACrB,mBAAGxL,KAAK,+CAA+CD,OAAO,SAASE,IAAI,sBAA3E,uBAEK,IAJP,mCAME,mBAAGD,KAAK,+BAA+BD,OAAO,SAASE,IAAI,sBAA3D,wBANF,QAYA,sBAAKL,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,+CAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,2BAKF,sBAAKjhB,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,2CAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,sCAKF,sBAAKjhB,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,wCAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,iCAGA,uBAAMjhB,MAAO,CAAE4J,WAAY,GAA3B,UACG,IADH,YAEY,IACV,oBAAGxJ,KAAK,iDAAiDD,OAAO,SAASE,IAAI,sBAA7E,UACG,IADH,YAHF,IAOI,UAIN,sBAAKL,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,eAEc,+CAFd,cAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,qCAHF,2BASA,sBAAKjhB,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,eAEc,+CAFd,cAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,sCAKF,sBAAKjhB,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,gCADF,aAEY,+CAFZ,MAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,mCAHF,wCAMwC,IACtC,mBACE7gB,KAAK,iEACLD,OAAO,SACPE,IAAI,sBAHN,kBAPF,OAiBA,sBAAKL,MAAO,CAAEqP,OAAQ,IAAtB,UACE,sBAAMrP,MAAO,CAAE8Q,YAAa,GAA5B,0BADF,eAEc,4DAFd,wBAGE,sBAAMH,UAAU,YAAY3Q,MAAOihB,GAAnC,sCAKF,sBAAKjhB,MAAO,CAAE+K,MAAO,IAAKsE,OAAQ,OAAQ8D,cAAe,IAAzD,UACE,sBAAKnT,MAAO,CAAEqP,OAAQ,GAAI3B,UAAW,SAArC,UACE,cAAC,KAAD,CACE/M,SAAU,SAAA6E,GACRga,EAAcha,EAAErF,OAAOlB,UAG3B,cAAC,IAAD,CACE+J,QAAS,WACP5G,QAAQC,IAAI,aAAckd,GAE1B1gB,EAAM4C,GAAG5C,EAAMygB,eAAeI,aAAaC,WAAWJ,KAJ1D,4BAWDva,EACC,cAAC,KAAD,CAAOoO,WAAYpO,EAAK+c,SAAUC,QAASR,EAAgBS,OAAO,OAElE,cAAC,IAAD,UAAa3P,EAAU,aAAewP,IAGxC,qBAAK9hB,MAAO,CAAEqP,OAAQ,GAAIiB,OAAQ,IAAKmP,OAAQ,oBAAqB/R,UAAW,QAA/E,SACE,cAAC,KAAD,CAAUwU,QA9KlB,SAAwBC,GACtB,OAAOC,KAAMvjB,EAAMwjB,YAAa,CAC9BrE,OAAQ,OACRsE,QAAS,CAAE,eAAgB,oBAC3Bjd,KAAMH,KAAKE,UAAU+c,KACpBI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAyKYC,iBAAe,EAACC,MAAOxB,SAI9D,qBAAKnhB,MAAO,CAAE8I,QAAS,IAAvB,qB,yCC1LEkI,GAAa9P,KA0EN0hB,GAxEY,SAAAC,GACzB,MAA8B9a,mBAAS,IAAvC,mBAAO+a,EAAP,KAAgBC,EAAhB,KACA,EAAsBhb,mBAAS7G,KAAiBwO,KAAK,MAArD,mBAAOsT,EAAP,KAAYC,EAAZ,KACA,EAA8Blb,oBAAS,GAAvC,mBAAOuK,EAAP,KAAgB4Q,EAAhB,KAEMjS,EAAW1G,uBAAY,WAE3B,OADyB,IAAIyG,GAASmS,IAAiBC,IAAaP,KAEnE,CAACA,IAEEQ,EAAO9Y,sBAAW,sBAAC,4BAAA5I,EAAA,yDACjB2P,EAAYL,KACdqS,KAAQhS,KAAcgS,KAAQT,GAFX,iDAGvBvR,EACGiS,aACAC,OAAM,SAAAve,GAAK,aAAIZ,KAAQY,MAAR,OAAcA,QAAd,IAAcA,GAAd,UAAcA,EAAOD,YAArB,aAAc,EAAaX,YAC1Cke,KAAKQ,GACLU,SAAQ,WACPC,YAAW,WACTR,GAAW,KACV,QAEPL,EAAac,WAAWR,KAAiBZ,KAAKU,GAZvB,2CAatB,CAAChS,EAAU4R,IAERe,EAAcrZ,sBAAW,uCAC7B,WAAMsZ,GAAN,iBAAAliB,EAAA,yDACQ2P,EAAYL,KACdqS,KAAQhS,GAFd,iDAGQvP,EAAS8gB,EAAa1gB,YAC5BmP,EACGc,QAAQrQ,GACR6hB,YAAYC,EAAM,CACjB5kB,MAAOiC,KAAiBwO,KAAK,IAAIoU,IAAI,IAAIC,IAAIF,KAE9CL,OAAM,SAAAve,GAAK,aAAIZ,KAAQY,MAAR,OAAcA,QAAd,IAAcA,GAAd,UAAcA,EAAOD,YAArB,aAAc,EAAaX,YAT/C,2CAD6B,sDAY7B,CAAC4M,EAAU4R,IAGPmB,EAAazZ,sBAAW,sBAAC,8BAAA5I,EAAA,yDACvB2P,EAAYL,KACdqS,KAAQhS,GAFiB,iDAGvBvP,EAAS8gB,EAAa1gB,YAC5BmP,EACGc,QAAQrQ,GACRiiB,aACAR,OAAM,SAAAve,GAAK,aAAIZ,KAAQY,MAAR,OAAcA,QAAd,IAAcA,GAAd,UAAcA,EAAOD,YAArB,aAAc,EAAaX,YAPhB,2CAQ5B,CAAC4M,EAAU4R,IAed,OAbArV,oBAAU6V,EAAM,CAACA,IAEjB7V,qBAAU,WACR,IAAM8D,EAAYL,IAClB,IAAIqS,KAAQhS,KAAcgS,KAAQT,GAGlC,OAFAvR,EAAUvN,GAAG,cAAesf,GAC5B/R,EAAUvN,GAAG,aAAcsf,GACpB,WACL/R,EAAU2S,IAAI,cAAeZ,GAC7B/R,EAAUvN,GAAG,aAAcsf,MAE5B,CAACpS,EAAU4R,EAAcQ,IAErB,CACLL,MACAF,UACAxQ,UACA0R,aACAJ,gB,uFChBWM,GAhDD,SAAArlB,GACZ,IAAQG,EAA0BH,EAA1BG,QAAS6jB,EAAiBhkB,EAAjBgkB,aACjB,EAA0B9a,mBAAS,GAAnC,mBAAO9I,EAAP,KAAciL,EAAd,KACA,EAAkD0Y,GAAmBC,GAA7DG,EAAR,EAAQA,IAAKF,EAAb,EAAaA,QAASkB,EAAtB,EAAsBA,WAAYJ,EAAlC,EAAkCA,YAQ5BO,EAAWC,KAAOC,KAAOC,KAAQxB,KAAW,SAAAxP,GAAI,OAAK,EAAIA,EAAK9T,UAEpE,OACE,eAAC,IAAD,CAAKQ,MAAO,CAAE8I,QAAS,QAAUyb,MAAM,SAASC,QAAQ,SAAxD,UACE,cAAC,IAAD,CAAK/W,KAAM,GAAX,SACE,cAAC,KAAD,CACEgX,OAAQ,0EAAevjB,SAAaoL,YAAY0W,EAAK,IAA7C,gBACRlK,OACE,cAAC,IAAD,CAAQjL,KAAK,UAAU7E,QAASgb,EAAhC,yBAIF5T,UAAQ,EACRgD,WAAY+Q,EACZ9Q,WAAY,SAACC,EAAMoR,GAAP,OACV,eAAC,KAAKnR,KAAN,WACE,eAAC,IAAW7U,KAAZ,CAAiBimB,KAAM3lB,IAAY4lB,KAAMtR,GAAzC,eACM,IAAMA,EAAK9T,OAAUsjB,EAAQtjB,QAAQkJ,QAAQ,GADnD,QAEmB,IAClBkc,KAAMtR,KAJOoR,QAStB,eAAC,IAAD,CAAKjX,KAAM,GAAIzN,MAAO,CAAE0N,UAAW,UAAnC,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAamX,KAAM,EAAG5lB,MAAOA,EAAO0B,SAAUuJ,EAAUyB,WAAW,iBACnE,cAAC,IAAD,CAAQkC,KAAK,UAAU7E,QAjCf,WACV/J,EAAQ,GACV2kB,EAAY3kB,IA+BR,6BAIF,oH,oHC7CA+R,GAAa9P,KAiJN4jB,GA/Ia,SAAAjC,GAC1B,MAAkB9a,mBAAS,GAA3B,mBAAOgd,EAAP,KAAUC,EAAV,KACA,EAAkBjd,mBAAS,GAA3B,mBAAOkd,EAAP,KAAUC,EAAV,KACA,EAA4Bnd,mBAAS,IAArC,mBAAOod,EAAP,KAAeC,EAAf,KACA,EAA8Brd,oBAAS,GAAvC,mBAAOuK,EAAP,KAAgB4Q,EAAhB,KACA,EAA4Bnb,mBAAS,IAArC,mBAAOkL,EAAP,KAAeoS,EAAf,KAEMpU,EAAW1G,uBAAY,WAE3B,OADyB,IAAIyG,GAASsU,IAAmBC,IAAe1C,KAEvE,CAACA,IAEE2C,EAAUjb,sBAAW,sBAAC,4BAAA5I,EAAA,yDACpB2P,EAAYL,KACdqS,KAAQhS,KAAcgS,KAAQT,GAFR,iDAI1BK,GAAW,GACX5f,QAAQmiB,IAAI,CAACnU,EAAUoU,OAAQpU,EAAUqU,SACtCpD,MAAK,YAAmB,IAAD,mBAAhBmD,EAAgB,KAAVC,EAAU,KAChBC,EAAWF,EAAKtZ,WAChByZ,EAAWF,EAAKvZ,WACtB4Y,EAAKY,GACLV,EAAKW,MAENpC,SAAQ,WACPC,YAAW,WACTR,GAAW,KACV,QAfmB,2CAiBzB,CAACjS,EAAU4R,IAERiD,EAAYvb,uBAChB,SAACwb,EAAUC,GACT,IAAM1U,EAAYL,IACdqS,KAAQhS,IAAcgS,KAAQT,IAClCvR,EAAU2U,SAASF,EAAUC,GAAUzD,MAAK,SAAAriB,GAC1C,IAAMgmB,EAAU,2BAAQf,GAAR,6BAAoBY,EAApB,YAAgCC,GAAa9lB,IAC7DklB,EAAUc,QAGd,CAACjV,EAAU4R,EAAcsC,IAGrBvF,EAASrV,sBAAW,uCACxB,WAAOwa,EAAGE,EAAG/kB,GAAb,iBAAAyB,EAAA,yDACQ2P,EAAYL,KACdqS,KAAQhS,GAFd,iDAGQvP,EAAS8gB,EAAa1gB,YAC5BmP,EAAUc,QAAQrQ,GAAQ6d,OAAOmF,EAAGE,EAAG/kB,GAJzC,2CADwB,0DAOxB,CAAC+Q,EAAU4R,IAGPsD,EAAmB5b,uBACvB,SAACvL,EAAS+mB,EAAUC,EAAU9lB,EAAOkmB,GACnC,IAAMC,EAAgBN,EAAS3Z,WACzBka,EAAgBN,EAAS5Z,WACzB8Z,EAAU,2BAAQf,GAAR,6BAAoBY,EAApB,YAAgCC,GAAa9lB,IAC7DklB,EAAUc,GACVE,EAAWG,WAAWhE,MAAK,YAAoB,IAAjBiE,EAAgB,EAAhBA,UACtBC,EAAOC,KAAO,IAAOF,GAC3BnB,EAAU,CACR,CACEoB,KAAMA,EAAKE,OAAO,uBAClB3nB,UACA+lB,EAAGsB,EACHpB,EAAGqB,EACHpmB,UANK,oBAQJ+S,UAIT,CAACA,EAAQkS,IA2DX,OAxDA3X,oBAAUgY,EAAS,CAACA,IAEpBhY,qBAAU,WACR,IAAM8D,EAAYL,IAClB,IAAIqS,KAAQhS,KAAcgS,KAAQT,GAElC,OADAvR,EAAUvN,GAAG,cAAeoiB,GACrB,WACL7U,EAAU2S,IAAI,cAAekC,MAE9B,CAACA,EAAkBlV,EAAU4R,IAEhCrV,qBAAU,WACR,IAAMoZ,EAAWliB,aAAY,WAC3B,IAAM4M,EAAYL,IAClB,IAAIqS,KAAQhS,KAAcgS,KAAQT,GAAlC,CACA,IAAMgE,EAAe,GACrBzkB,QAAQ0kB,eAAe,oDACvB,IALiC,eAKxBpC,GACP,IAN+B,eAMtBqC,GACP,IAAM9f,EAAG,UAAMyd,EAAN,YAAeqC,GACpBC,KAAY7B,EAAOle,MACrB7E,QAAQC,IAAI,SAAUqiB,EAAOqC,GAC7BF,EAAahX,KACXyB,EACG2U,SAASvB,EAAOqC,GAChBxE,MAAK,SAAAriB,GACJ,OAAO,0BACDwkB,EADN,YACeqC,GAAe7mB,MAG/BsjB,OAAM,kBAZNuD,EAAa,EAAGA,EAAa9B,EAAG8B,IAAe,EAA/CA,GAgBT,GAAIF,EAAarnB,OAAS,IAAK,eAjBxBklB,EAAQ,EAAGA,EAAQK,EAAGL,IAAS,gBAA/BA,GAiBwB,MAEjCtiB,QAAQ6kB,SAAS,oDACW,IAAxBJ,EAAarnB,QACjB8D,QAAQ4jB,WAAWL,GAActE,MAAK,SAAA4E,GACpC/kB,QAAQC,IAAI,4BAAS8kB,EAAKta,KAAIsa,EAAK,UACnC,IAAMjB,EAAakB,KACjBva,KAAIsa,EAAK,UACT,SAACE,EAAI/T,GACH,OAAO,2BACF+T,GACA/T,KAGP6R,GAEFC,EAAUc,SAEX,KACH,OAAO,kBAAMphB,cAAc8hB,MAC1B,CAAC3V,EAAU4R,EAAcsC,EAAQJ,EAAGE,IAEhC,CACLF,IACAE,IACAE,SACAW,YACAxT,UACAsN,SACA3M,WCvIEqU,GAAQ,SAAAzoB,GACZ,IAAQkmB,EAA0ClmB,EAA1CkmB,EAAGE,EAAuCpmB,EAAvComB,EAAGjlB,EAAoCnB,EAApCmB,MAAOmlB,EAA6BtmB,EAA7BsmB,OAAQoC,EAAqB1oB,EAArB0oB,iBACvBC,EAAM,UAAMzC,EAAN,YAAWE,GACjB/kB,EAAQilB,EAAOqC,GACrB,OACE,qBACE1gB,GAAI0gB,EAEJxnB,MAAK,2BACAA,GADA,IAEHynB,WAAYvnB,IAEdwnB,aAAc,kBAAMH,EAAiBxC,EAAGE,IACxCtU,UAAWqW,KAAY9mB,GAAS,wBAA0B,iBANrDsnB,IA2FIG,GAhFG,SAAA9oB,GAChB,IAAQG,EAA0BH,EAA1BG,QAAS6jB,EAAiBhkB,EAAjBgkB,aACjB,EAA6DiC,GAAoBjC,GAAzEkC,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EAAG3S,EAAd,EAAcA,QAASsN,EAAvB,EAAuBA,OAAQ3M,EAA/B,EAA+BA,OAAQkS,EAAvC,EAAuCA,OAAQW,EAA/C,EAA+CA,UAC/C,EAA0B/d,mBAASwN,aAAaC,QAAQ,UAAYoS,KAApE,mBAAO1nB,EAAP,KAAc2nB,EAAd,KAQMC,EAAW,UAAM,IAAM/C,EAAZ,KACXgD,EAAU,UAAM,IAAM9C,EAAZ,KAEhB,OACE,eAAC,IAAD,CAAK+C,OAAQ,CAAC,GAAI,IAAKhoB,MAAO,CAAE8I,QAAS,QAAzC,UACE,cAAC,IAAD,CAAK2E,KAAM,GAAX,SACE,cAAC,KAAD,CAAMwa,SAAU3V,EAAhB,UACIA,GACA,qBAAK3B,UAAW,qBAAsB3H,QAd5B,SAAAsG,GAClB,IACA,EADWA,EAAMnP,OAAO+nB,aAAa,MACnB5oB,MAAM,KAAxB,mBAAOylB,EAAP,KAAUE,EAAV,KACArF,EAAOmF,EAAGE,EAAG/kB,IAWL,SACG2M,KAAI,IAAIsb,MAAMpD,IAAI,SAACzR,EAAMoR,GACxB,OAAO7X,KAAI,IAAIsb,MAAMlD,IAAI,SAACmD,EAAWrB,GACnC,OACE,cAAC,GAAD,CACEhC,EAAGL,EACHO,EAAG8B,EACH5B,OAAQA,EACRoC,iBAAkBzB,EAClB9lB,MAAO,CAAEsQ,OAAQwX,EAAa/c,MAAOgd,iBASrD,eAAC,IAAD,CAAKta,KAAM,EAAX,UACE,qDAEE,cAAC,KAAD,CACE4a,QACE,cAAC,KAAD,CACEC,OAAQ,CAAEC,KAAM,CAAElZ,OAAQ,WAC1BnP,MAAOA,EACPsoB,iBAAkB,SAAA9b,GAChBmb,EAASnb,EAAE+b,KACXlT,aAAaE,QAAQ,QAAS/I,EAAE+b,QAItC7Z,MAAM,eAXR,SAaE,sBACE5O,MAAO,CACLynB,WAAYvnB,EACZuf,OAAO,aAAD,OAAevf,IAAU0nB,IAAgB,OAAS1nB,GACxD4I,QAAS,SACTC,OAAQ,eApBhB,iFA0BA,cAAC,KAAD,CACE0b,OAAQ,2DACRrU,UAAQ,EACRgD,WAAYH,EACZI,WAAY,SAACC,EAAMoR,GAAP,OACV,eAAC,KAAKnR,KAAN,CAAW3E,MAAO0E,EAAKtU,QAAvB,UACE,eAAC,IAAWN,KAAZ,CAAiBimB,KAAM3lB,IAAYsU,EAAKtU,QAAxC,cAAmDsU,EAAKmT,KAAxD,OADF,MACsF,EAAInT,EAAKyR,EAD/F,MAEG,EAAIzR,EAAK2R,EAFZ,IAEe,sBAAMjlB,MAAO,CAAEynB,WAAYnU,EAAKpT,MAAO4I,QAAS,WAAYc,WAAY,cAFlD8a,aCxEzCxjB,GAAWC,EAAQ,IAAnBD,OAqBFwnB,GAAiBC,IAASC,UAQ1Btf,GAAYuf,IAGZvN,GAAY,CAChB,0EADgB,+CAEwBzV,KACxC,oCA8YaijB,OA3Yf,SAAajqB,GAGX,IAAMkqB,EAAiB,CAACL,GAAetlB,KAAM,UAAW,UAExD,EAAgD2E,qBAAhD,mBAAOihB,EAAP,KAAyBC,EAAzB,KACA,EAA8BlhB,qBAA9B,mBAAO/I,EAAP,KAAgBma,EAAhB,KACA,EAA8CpR,mBAASghB,EAAe,IAAtE,mBAAOG,EAAP,KACMtT,GADN,KACiBuT,eAEXlM,EAAgB0L,IAASO,GAGzBxpB,EAAgBud,EAAcvd,cAG9ByJ,EAAgBsS,GAAiB,CACrC2N,oIAAYC,mBAAqBD,oIAAYC,mBAAqBpM,EAAcY,SAG5ExU,EAAkBoS,GAAiBH,GAAWnS,GAG9CjB,EAA2BP,EAAewB,GAC1CmgB,EAA6B3hB,EAAe0B,GAEvCjH,QAAQC,IAAR,gBAAqB6mB,EAArB,aAGA9mB,QAAQC,IAAI,+CAEvB,IAAMmH,EAAiB,uCAAG,sBAAA7H,EAAA,sEAClB2H,GAAUigB,sBADQ,WAEpBP,IAAoBA,EAAiBlnB,UAA2D,mBAAxCknB,EAAiBlnB,SAAS0nB,WAF9D,gCAGhBR,EAAiBlnB,SAAS0nB,aAHV,OAKxB9F,YAAW,WACTzf,OAAO2R,SAASC,WACf,GAPqB,2CAAH,qDAWjBjN,EAAQ6gB,YAAoBxM,EAAe5T,EAAiBigB,GAG5D/nB,EAAWid,YAAYvB,EAAe,OAAQ/U,GAG9CkB,EADwBsgB,YAAyBV,EAAkB7f,EA3DjD,MA4DiBpH,OAEzCyL,qBAAU,WAAM,4CACd,4BAAA7L,EAAA,0DACMyH,EADN,gCAE6BA,EAAW4M,aAFxC,OAEUC,EAFV,OAGIkD,EAAWlD,GAHf,4CADc,uBAAC,WAAD,wBAOdD,KACC,CAAC5M,IAGJ,IAAM2T,EAAe5T,GAAiBA,EAAcvB,UAAYuB,EAAcvB,SAAShF,QACjFoa,EACJ5T,GAAcA,EAAWtH,UAAYsH,EAAWtH,SAAS8F,UAAYwB,EAAWtH,SAAS8F,SAAShF,QAK9FnB,EAAKJ,EAAW+H,EAAY7H,GAG5B+c,EAAmBlW,YAAWe,EAAenK,EAASkJ,GAGtDyhB,EAAqBvhB,YAAWiB,EAAiBrK,EAASsqB,GAI1DjY,EAAiB,CAAEuY,kBAAmBA,MAAqB,IAG3DvK,EAAgB9N,YAAkBpI,EAAekI,GAGjDiO,EAAiB/N,YAAkBnI,EAAYiI,EAAgB0L,GAK/D8M,EAAmBtY,YAAkBlI,EAAiBgI,GAQtDyY,EAAsBC,YAC1BF,EACA,MACA,YACA,CAAC,8CACDP,GAII5V,EAAUqW,YAAkB1K,EAAe,eAAgB,UAAW,GAAInX,GAUhFsF,qBAAU,WAGNnE,GACArK,GACAge,GACAsB,GACAqL,GACAtK,GACAC,GACAuK,IAEAznB,QAAQC,IAAI,yGACZD,QAAQC,IAAI,+BAAsBgH,GAClCjH,QAAQC,IAAI,4BAAmB0a,GAC/B3a,QAAQC,IAAI,mDAA2BrD,GACvCoD,QAAQC,IAAI,8DAA4B2a,GACxC5a,QAAQC,IAAI,gCAAuBic,EAAmBpd,GAAOsC,MAAMiF,YAAY6V,GAAoB,OACnGlc,QAAQC,IAAI,kCAAyBsnB,EAAqBzoB,GAAOsC,MAAMiF,YAAYkhB,GAAsB,OACzGvnB,QAAQC,IAAI,6BAAoBgd,GAChCjd,QAAQC,IAAI,wCAA+BwnB,GAC3CznB,QAAQC,IAAI,qCAA4BynB,GACxC1nB,QAAQC,IAAI,8BAAqBid,MAElC,CACDjW,EACArK,EACAge,EACAsB,EACAqL,EACAtK,EACAC,EACAuK,EACA9M,EACA+M,IAGF,IAAMvgB,EAAgBgB,sBAAW,sBAAC,4BAAA5I,EAAA,sEACT2H,GAAU8I,UADD,OAC1BtQ,EAD0B,OAEhCmnB,EAAoB,IAAI/nB,GAAOoa,UAAU0O,aAAaloB,IAEtDA,EAASiC,GAAG,gBAAgB,SAAAnB,GAC1BR,QAAQC,IAAR,2BAAgCO,EAAhC,yBACAqmB,EAAoB,IAAI/nB,GAAOoa,UAAU0O,aAAaloB,OAGxDA,EAASiC,GAAG,mBAAmB,WAC7B3B,QAAQC,IAAR,oBACA4mB,EAAoB,IAAI/nB,GAAOoa,UAAU0O,aAAaloB,OAIxDA,EAASiC,GAAG,cAAc,SAACkmB,EAAMC,GAC/B9nB,QAAQC,IAAI4nB,EAAMC,GAClB1gB,OAjB8B,2CAoB/B,CAACyf,IAEJzb,qBAAU,WACJlE,GAAUI,gBACZH,MAED,CAACA,IAEJ,IAAM4gB,EAAkBhhB,GAAiBA,EAAcihB,aAAuD,IAAzCnN,EAAc7Z,KAAKS,QAAQ,SAEhG,OACE,sBAAK8M,UAAU,MAAf,UAEE,cAACiJ,GAAD,UAEE,qBAAK5Z,MAAO,CAAE4K,SAAU,WAAYjE,QAAS,OAAQqT,cAAe,UAApE,SACE,sBAAKha,MAAO,CAAE2G,QAAS,OAAQsT,KAAM,GAArC,UAxMmB,MAkNjB,cAAChR,GAAD,CACEohB,UApNY,KAqNZrrB,QAASA,EACTmK,cAAeA,EACfC,WAAYA,EACZC,gBAAiBA,EACjBT,MAAOA,EACPU,UAAWA,GACXC,cAAeA,EACfC,kBAAmBA,EACnB9J,cAAeA,WAKtB4e,EAAiBgM,IAAIppB,GAAO6M,UAAU2B,KAAK,OAC1C,cAAC,GAAD,CAAYvG,cAAeA,EAAe8T,cAAeA,EAAeje,QAASA,IAEnF,cAAC,GAAD,CACE8d,aAvOa,KAwObC,aAAcA,EACdC,gBAAiBA,EACjBC,cAAeA,EACfzT,kBAAmBA,EACnB0T,qBA1OqB,QA4OvB,eAAC,IAAD,CAAMld,MAAO,CAAE+Z,eAAgB,SAAUnO,UAAW,IAAM2e,aAAc,CAAC3U,EAAS4U,UAAWhY,KAAK,aAAlG,UAmBE,cAAC,IAAKe,KAAN,UACE,cAAC,IAAD,CAAMwF,GAAG,IAAT,mBADa,KAGdiQ,GACC,cAAC,IAAKzV,KAAN,UACE,cAAC,IAAD,CAAMwF,GAAG,aAAT,wBADa,cAIhBiQ,GACC,cAAC,IAAKzV,KAAN,UACE,cAAC,IAAD,CAAMwF,GAAG,QAAT,mBADa,YAMnB,eAAC,IAAD,WACE,cAAC,IAAD,CAAO0R,OAAK,EAACC,KAAK,IAAlB,SAEE,cAAC,GAAD,CAAMpM,iBAAkBA,EAAkBe,cAAeA,MAE3D,cAAC,IAAD,CAAOoL,OAAK,EAACC,KAAK,SAAlB,SAOE,cAAC1Z,GAAD,CACE5N,KAAK,eACLwF,MAAOA,EACP7G,OAAQqH,EACRtH,SAAUqH,EACVnK,QAASA,EACTU,cAAeA,EACf2R,eAAgBA,MAGpB,cAAC,IAAD,CAAOqZ,KAAK,SAAZ,SACE,cAACpK,GAAD,CACEthB,QAASA,EACTsf,iBAAkBA,EAClBjV,gBAAiBA,EACjBT,MAAOA,MAGX,cAAC,IAAD,CAAO8hB,KAAK,aAAZ,SACE,cAACtL,GAAD,CACEpgB,QAASA,EACToK,WAAYA,EACZC,gBAAiBA,EACjBF,cAAeA,EACfmV,iBAAkBA,EAClB1V,MAAOA,EACPnH,GAAIA,EACJ6d,eAAgBA,EAChBD,cAAeA,EACf3L,QAASA,MAGb,cAAC,IAAD,CAAOgX,KAAK,cAAZ,SACE,cAAC1Z,GAAD,CACE5N,KAAK,MACL8N,eAAgB2Y,GAAoBA,EAAiBvY,WAAauY,EAAiBvY,UAAUqZ,IAC7F5oB,OAAQqH,EACRtH,SAAUuH,EACVrK,QAASA,EACTU,cAAc,wBACd2R,eAAgBA,EAChBzO,QAAS,MAab,cAAC,IAAD,CAAO8nB,KAAK,YAAZ,SACE,cAAC,GAAD,CACErI,YAAaxjB,EAAMwjB,YACnB5gB,GAAIA,EACJ6d,eAAgBA,EAChBjW,gBAAiBA,MAGpB2f,GACC,cAAC,IAAD,CAAO0B,KAAK,aAAZ,SACE,cAAC,GAAD,CAAW7H,aAAcmG,MAG5BA,GACC,cAAC,IAAD,CAAO0B,KAAK,QAAZ,SACE,cAAC,GAAD,CAAO1rB,QAASA,EAAS6jB,aAAcmG,MAG1ChqB,IAAYgqB,GACX,cAAC,IAAD,CAAO0B,KAAK,IAAZ,SACE,cAAC,IAAD,CAAUA,KAAK,WAKrB,cAAC,GAAD,IAGA,sBAAK1qB,MAAO,CAAE4K,SAAU,QAAS8C,UAAW,OAAQ7C,KAAM,EAAG2R,OAAQ,GAAI1T,QAAS,GAAInC,QAAS,QAA/F,UACE,eAAC,IAAD,CAAK4d,MAAM,SAASyD,OAAQ,CAAC,EAAG,GAAhC,UACE,cAAC,IAAD,CAAKva,KAAM,EAAX,SACE,cAAC4M,GAAD,CAAMzR,MAAOA,EAAO5J,QAASA,EAAS0b,SAAUiO,QAGlD,cAAC,IAAD,CAAKlb,KAAM,EAAGzN,MAAO,CAAE0N,UAAW,SAAUC,QAAS,IAArD,SACE,cAAC8L,GAAD,CAAUlY,SAAUA,MAEtB,cAAC,IAAD,CAAKkM,KAAM,EAAGzN,MAAO,CAAE0N,UAAW,SAAUC,QAAS,GAArD,SACE,eAAC,IAAD,CACE3E,QAAS,WACP/E,OAAOC,KAAK,iDAEdpE,KAAK,QACL+J,MAAM,QALR,UAOE,sBAAM7J,MAAO,CAAE8Q,YAAa,GAAKC,KAAK,MAAM,aAAW,UAAvD,0BAPF,kBAeJ,cAAC,IAAD,CAAKwT,MAAM,SAASyD,OAAQ,CAAC,EAAG,GAAhC,SACE,cAAC,IAAD,CAAKva,KAAM,GAAX,SAGI0c,EACE,cAAClR,GAAD,CAAQ9P,cAAeA,EAAeP,MAAOA,EAAOxJ,YAAaiK,IAEjE,cCjcViT,I,QAAS,CACbK,KAAK,GAAD,OAAKyM,IAAL,mBACJxM,MAAM,GAAD,OAAKwM,IAAL,sBAGDwB,GAAY3mB,OAAOsR,aAAaC,QAAQ,SAExC6M,GAAc,kEAEdwI,GAAS,IAAIC,IAAa,CAC9BC,IAAK1I,GACL2I,MAAO,IAAIC,MAGbC,IAASxJ,OACP,cAACyJ,EAAA,EAAD,CAAgBN,OAAQA,GAAxB,SACE,cAAC,IAAD,CAAuBO,SAAU9O,GAAQ+O,aAAcT,IAAa,QAApE,SACE,cAAC,IAAD,UACE,cAAC,GAAD,CAAKvI,YAAaA,WAIxBpK,SAASqT,eAAe,U,iCC9B1B,kYACO,IAAM9kB,EAAY,mCAMZ/D,EAAqB,uCAErBoD,EAAc,mCAUdgC,EAAgB,IAMhB8gB,EAAW,CACtBC,UAAW,CACTxlB,KAAM,YACNlD,MAAO,UACP0C,QAAS,MACTlD,cAAe,GACfme,OAVgBuL,oIAAYmC,qBAAZ,kBACLtnB,OAAO2R,SAAS4V,SAASC,QAAQ,OAAQ,SACpD,WAAaC,EAAOznB,OAASA,OAAO2R,SAAS4V,SAAW,aAAe,SAUzEG,QAAS,CACPvoB,KAAM,UACNlD,MAAO,UACP0C,QAAS,EACTib,OAAO,gCAAD,OAAkCrX,GACxC9G,cAAe,yBAEjBksB,OAAQ,CACNxoB,KAAM,SACNlD,MAAO,UACP0C,QAAS,EACT+X,OAAQ,kCACRjb,cAAe,+BACfme,OAAO,+BAAD,OAAiCrX,IAEzCqlB,KAAM,CACJzoB,KAAM,OACNlD,MAAO,UACP0C,QAAS,IACTgG,MAAO,EACPrH,SAAU,IACVsc,OAAQ,0BACRlD,OAAQ,2BACRjb,cAAe,oCAEjBosB,QAAS,CACP1oB,KAAM,UACNlD,MAAO,UACP0C,QAAS,IACTgG,MAAO,EACPrH,SAAU,IACVsc,OAAQ,2BACRne,cAAe,4BAEjBqsB,OAAQ,CACN3oB,KAAM,SACNlD,MAAO,UACP0C,QAAS,MACTgG,MAAO,EACPrH,SAAU,IACVsc,OAAQ,oCACRlD,OAAQ,qCACRjb,cAAe,mCAEjBssB,gBAAiB,CACf5oB,KAAM,kBACNlD,MAAO,UACP0C,QAAS,MACTlD,cAAe,GACfme,OAAQ,WAAa6N,EAAOznB,OAASA,OAAO2R,SAAS4V,SAAW,aAAe,SAEjFS,cAAe,CACb7oB,KAAM,gBACNlD,MAAO,UACP0C,QAAS,IACTlD,cAAe,GACfme,OAAQ,WAAa6N,EAAOznB,OAASA,OAAO2R,SAAS4V,SAAW,aAAe,QAC/EjqB,SAAU,GAEZ2qB,eAAgB,CACd9oB,KAAM,iBACNlD,MAAO,UACP0C,QAAS,IACTlD,cAAe,sBACfme,OAAO,8BACPtc,SAAU,GAEZ4qB,SAAU,CACR/oB,KAAM,WACNlD,MAAO,UACP0C,QAAS,GACTlD,cAAe,mCACfme,OAAO,+BAETuO,eAAgB,CACdhpB,KAAM,iBACNlD,MAAO,UACP0C,QAAS,OACTlD,cAAe,6CACfme,OAAQ,0CAEVwO,SAAU,CACRjpB,KAAM,WACNlD,MAAO,UACP0C,QAAS,MACTlD,cAAe,uBACfme,OAAQ,gCAEVyO,eAAgB,CACdlpB,KAAM,iBACNlD,MAAO,UACP0C,QAAS,OACTlD,cAAe,6CACfme,OAAQ,wCAEV0O,eAAgB,CACdnpB,KAAM,iBACNlD,MAAO,UACP0C,QAAS,MACTlD,cAAe,GACfme,OAAO,qCACPtc,SAAU,OAEZirB,cAAe,CACbppB,KAAM,gBACNlD,MAAO,UACP0C,QAAS,MACTlD,cAAe,6CACfme,OAAO,6CACPtc,SAAU,OAEZkrB,iBAAkB,CAChBrpB,KAAM,mBACNlD,MAAO,UACP0C,QAAS,MACTlD,cAAe,wCACfme,OAAO,wCACPtc,SAAU,OAEZmrB,eAAgB,CACdtpB,KAAM,iBACNlD,MAAO,UACP0C,QAAS,QACTlD,cAAe,6BACfme,OAAO,2BACPtc,SAAU,KAEZorB,eAAgB,CACdvpB,KAAM,iBACNlD,MAAO,UACP0C,QAAS,QACTlD,cAAe,gCACfme,OAAO,0BACPtc,SAAU,KAEZqrB,OAAQ,CACNxpB,KAAM,SACNlD,MAAO,UACP0C,QAAS,IACTlD,cAAe,uBACfme,OAAO,gCACPtc,SAAU,KAEZsrB,cAAe,CACbzpB,KAAM,gBACNlD,MAAO,UACP0C,QAAS,KACTlD,cAAe,+BACfme,OAAO,qCACPtc,SAAU,IACVoZ,OAAQ,kCAEVmS,SAAU,CACR1pB,KAAM,WACNlD,MAAO,UACP0C,QAAS,KACTlD,cAAe,sBACfme,OAAQ,oCAEVkP,UAAW,CACT3pB,KAAM,YACNlD,MAAO,UACP0C,QAAS,KACTlD,cAAe,iCACfme,OAAQ,8CAEVmP,cAAe,CACb5pB,KAAM,gBACNlD,MAAO,UACP0C,QAAS,KACTlD,cAAe,gCACfme,OAAQ,4CACRlD,OAAQ,iCAEVsS,gBAAiB,CACf7pB,KAAM,kBACNlD,MAAO,UACP0C,QAAS,KACTlD,cAAe,yCACfme,OAAQ,0BAICR,EAAU,SAAAza,GACrB,IAAK,IAAM6X,KAAKkO,EACd,GAAIA,EAASlO,GAAG7X,UAAYA,EAC1B,OAAO+lB,EAASlO,IAKT2I,EAAc,CACzB,CACE1U,OAAQ,GACRwB,gBAAiB,aACjBrC,KAAM,eAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACTC,aAAc,UACdhqB,KAAM,SACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,SACdhqB,KAAM,OACNyK,KAAM,WAGVzK,KAAM,cACNyK,KAAM,SAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACTC,aAAc,UACdhqB,KAAM,SACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,SACNyK,KAAM,YAGVzK,KAAM,aACNyK,KAAM,SAER,CACEa,OAAQ,GACRtL,KAAM,aACNiqB,QAAS,CACP,CACED,aAAc,YACdhqB,KAAM,GACNyK,KAAM,cAGVqC,gBAAiB,OACjBrC,KAAM,YAER,CACEa,OAAQ,GACRtL,KAAM,QACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVqC,gBAAiB,OACjBrC,KAAM,YAER,CACEa,OAAQ,CACN,CACE0e,aAAc,SACdhqB,KAAM,OACNyK,KAAM,WAGVzK,KAAM,cACNiqB,QAAS,GACTnd,gBAAiB,UACjBrC,KAAM,YAER,CACEa,OAAQ,GACRtL,KAAM,aACNiqB,QAAS,GACTnd,gBAAiB,aACjBrC,KAAM,YAER,CACEa,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVzK,KAAM,UACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVqC,gBAAiB,OACjBrC,KAAM,aAIG0X,EAAgB,CAC3B,CACE7W,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,IACNyK,KAAM,YAGVqC,gBAAiB,UACjBrC,KAAM,eAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACTC,aAAc,UACdhqB,KAAM,UACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,SACdhqB,KAAM,QACNyK,KAAM,WAGVzK,KAAM,cACNyK,KAAM,SAER,CACEa,OAAQ,CACN,CACE0e,aAAc,SACdhqB,KAAM,GACNyK,KAAM,WAGVzK,KAAM,SACNiqB,QAAS,CACP,CACED,aAAc,SACdhqB,KAAM,GACNyK,KAAM,WAGVqC,gBAAiB,OACjBrC,KAAM,YAER,CACEa,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,IACNyK,KAAM,YAGVzK,KAAM,WACNiqB,QAAS,CACP,CACED,aAAc,SACdhqB,KAAM,SACNyK,KAAM,WAGVqC,gBAAiB,OACjBrC,KAAM,YAER,CACEa,OAAQ,GACRtL,KAAM,OACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVqC,gBAAiB,OACjBrC,KAAM,YAER,CACEa,OAAQ,GACRtL,KAAM,OACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVqC,gBAAiB,OACjBrC,KAAM,YAER,CACEa,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEuf,aAAc,SACdhqB,KAAM,QACNyK,KAAM,WAGVzK,KAAM,SACNiqB,QAAS,GACTnd,gBAAiB,UACjBrC,KAAM,aAIGyX,EAAoB,6CACpBnC,EAAkB,6CAElByE,EAAgB,Y,0DCmT7B0F,EAAOC,QAAU,CACf,EAAG,CACDjc,UAAW,CACTqZ,IAAK,CACH3rB,QAAS,6CACTwuB,IA1jBO,CACb,CACE9e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,WACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,eAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,WACNyK,KAAM,SAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACTC,aAAc,SACdhqB,KAAM,MACNyK,KAAM,UAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,OACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,OACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,QACdhqB,KAAM,OACNyK,KAAM,UAGVzK,KAAM,UACNyK,KAAM,SAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEsf,SAAS,EACTC,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,WACNyK,KAAM,SAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,mBACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,kBACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,GACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVzK,KAAM,YACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,UACNiqB,QAAS,CACP,CACED,aAAc,OACdhqB,KAAM,GACNyK,KAAM,SAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVzK,KAAM,YACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,WACNiqB,QAAS,CACP,CACED,aAAc,QACdhqB,KAAM,GACNyK,KAAM,UAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,OACNiqB,QAAS,CACP,CACED,aAAc,SACdhqB,KAAM,GACNyK,KAAM,WAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVzK,KAAM,SACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,SACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,UACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,QACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,SACNyK,KAAM,WAER,CACEuf,aAAc,OACdhqB,KAAM,UACNyK,KAAM,QAER,CACEuf,aAAc,QACdhqB,KAAM,IACNyK,KAAM,SAER,CACEuf,aAAc,UACdhqB,KAAM,IACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,IACNyK,KAAM,YAGVzK,KAAM,SACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,OACNiqB,QAAS,GACTzd,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,SACNiqB,QAAS,CACP,CACED,aAAc,SACdhqB,KAAM,GACNyK,KAAM,WAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,cACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,WACNiqB,QAAS,CACP,CACED,aAAc,OACdhqB,KAAM,GACNyK,KAAM,SAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,WAER,CACEuf,aAAc,UACdhqB,KAAM,MACNyK,KAAM,YAGVzK,KAAM,eACNiqB,QAAS,CACP,CACED,aAAc,OACdhqB,KAAM,GACNyK,KAAM,SAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,UACNiqB,QAAS,CACP,CACED,aAAc,SACdhqB,KAAM,GACNyK,KAAM,WAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACE0e,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGVzK,KAAM,QACNiqB,QAAS,CACP,CACED,aAAc,UACdhqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,cAYJ6f,IAAK,CACH1uB,QAAS,6CACTwuB,IA5xBS,CACf,CACEC,UAAU,EACV/e,OAAQ,GACRtL,KAAM,OACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,WAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACEtL,KAAM,WACNyK,KAAM,WAER,CACEzK,KAAM,SACNyK,KAAM,YAGVzK,KAAM,UACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,SAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,cACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACEtL,KAAM,QACNyK,KAAM,WAER,CACEzK,KAAM,MACNyK,KAAM,WAER,CACEzK,KAAM,SACNyK,KAAM,YAGVzK,KAAM,eACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,SAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,WACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,UAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACEtL,KAAM,SACNyK,KAAM,YAGVzK,KAAM,YACNiqB,QAAS,CACP,CACEjqB,KAAM,UACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,GACRtL,KAAM,SACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,WAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACEtL,KAAM,MACNyK,KAAM,WAER,CACEzK,KAAM,SACNyK,KAAM,YAGVzK,KAAM,WACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,SAGV+B,SAAS,EACTM,gBAAiB,aACjBrC,KAAM,YAER,CACE4f,UAAU,EACV/e,OAAQ,CACN,CACEtL,KAAM,SACNyK,KAAM,WAER,CACEzK,KAAM,WACNyK,KAAM,YAGVzK,KAAM,YACNiqB,QAAS,CACP,CACEjqB,KAAM,GACNyK,KAAM,YAGV+B,SAAS,EACTM,gBAAiB,OACjBrC,KAAM,YAER,CACE+B,SAAS,EACTM,gBAAiB,UACjBrC,KAAM,YAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACT/pB,KAAM,QACNyK,KAAM,WAER,CACEsf,SAAS,EACT/pB,KAAM,UACNyK,KAAM,WAER,CACEsf,SAAS,EACT/pB,KAAM,QACNyK,KAAM,YAGVzK,KAAM,WACNyK,KAAM,SAER,CACEqf,WAAW,EACXxe,OAAQ,CACN,CACEye,SAAS,EACT/pB,KAAM,OACNyK,KAAM,WAER,CACEsf,SAAS,EACT/pB,KAAM,KACNyK,KAAM,WAER,CACEsf,SAAS,EACT/pB,KAAM,QACNyK,KAAM,YAGVzK,KAAM,WACNyK,KAAM,gB","file":"static/js/main.1ecae202.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/** \n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\",\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import { RPC_POLL_TIME } from \"../constants\";\n\n// Get the appropriate polling time for a given provider.\nexport const getRPCPollTime = provider => {\n  // No polling interval on local hardhat chain.\n  if (provider?._network?.chainId === 31337) {\n    return 0;\n  } else {\n    return RPC_POLL_TIME;\n  }\n};\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { getRPCPollTime } from \"../helpers\";\n\nconst { utils } = require(\"ethers\");\n\n/**\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  let localProviderPollingTime = getRPCPollTime(props.provider);\n\n  const balance = useBalance(props.provider, props.address, localProviderPollingTime);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = (floatBalance * price).toFixed(2) + \" ETH\";\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n// import { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\n// import Wallet from \"./Wallet\";\n\n/** \n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  // const { currentTheme } = useThemeSwitcher();\n\n  let accountButtonInfo;\n  if (web3Modal?.cachedProvider) {\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\n  } else {\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\n  }\n\n  const display = !minimized && (\n    <span>\n      {address && (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\n      )}\n      <Balance address={address} provider={localProvider} price={1} size={20} />\n      {/* {!isContract && (\n        <Wallet\n          address={address}\n          provider={localProvider}\n          signer={userSigner}\n          ensProvider={mainnetProvider}\n          price={price}\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          size={22}\n          padding={\"0px\"}\n        />\n      )} */}\n    </span>\n  );\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {display}\n      {web3Modal && (\n        <Button style={{ marginLeft: 8 }} shape=\"round\" onClick={accountButtonInfo.action}>\n          {accountButtonInfo.name}\n        </Button>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon = isReadable(functionInfo) ? (\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\n  ) : (\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\n  );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport React, { useMemo, useState } from \"react\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} blockExplorer={blockExplorer} />\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { List } from \"antd\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\nimport Address from \"./Address\";\n\n/**\n  ~ What it does? ~\n\n  Displays a lists of events\n\n  ~ How can I use? ~\n\n  <Events\n    contracts={readContracts}\n    contractName=\"YourContract\"\n    eventName=\"SetPurpose\"\n    localProvider={localProvider}\n    mainnetProvider={mainnetProvider}\n    startBlock={1}\n  />\n**/\n\nexport default function Events({ contracts, contractName, eventName, localProvider, mainnetProvider, startBlock }) {\n  // 📟 Listen for broadcast events\n  const events = useEventListener(contracts, contractName, eventName, localProvider, startBlock);\n\n  return (\n    <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 32 }}>\n      <h2>Events:</h2>\n      <List\n        bordered\n        dataSource={events}\n        renderItem={item => {\n          return (\n            <List.Item key={item.blockNumber + \"_\" + item.args.sender + \"_\" + item.args.purpose}>\n              <Address address={item.args[0]} ensProvider={mainnetProvider} fontSize={16} />\n              {item.args[1]}\n            </List.Item>\n          );\n        }}\n      />\n    </div>\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button, Input } from \"antd\";\nimport Address from \"./Address\";\n\nexport default function WalletImport({ setShowImport }) {\n  const [importMnemonic, setImportMnemonic] = useState();\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\n  const [password, setPassword] = useState(\"\");\n  const [importPrivatekey, setImportPrivatekey] = useState();\n  const [importAddress, setImportAddress] = useState();\n\n  useEffect(() => {\n    const calculatePK = async () => {\n      if (importMnemonic) {\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\n\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\n        const fullPath = wallet_hdpath + importMnemonicIndex;\n\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\n\n        setImportPrivatekey(ethersPrivateKey);\n      } else {\n        setImportPrivatekey();\n      }\n    };\n    calculatePK();\n  }, [importMnemonic, importMnemonicIndex, password]);\n\n  useEffect(() => {\n    const calculateAddress = async () => {\n      if (importPrivatekey) {\n        try {\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\n          console.log(officialEthersWallet);\n          setImportAddress(officialEthersWallet.address);\n        } catch (e) {\n          console.log(e);\n          setImportAddress(\"\");\n        }\n      }\n    };\n    calculateAddress();\n  }, [importPrivatekey]);\n\n  return (\n    <div>\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h2>IMPORT</h2>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"word1 word2 word3\"\n        onChange={async e => {\n          setImportMnemonic(e.target.value);\n        }}\n      />\n\n      <Input\n        style={{ width: 69 }}\n        value={importMnemonicIndex}\n        onChange={e => {\n          setImportMnemonicIndex(e.target.value);\n        }}\n        size=\"large\"\n      />\n\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"optional password\"\n        onChange={async e => {\n          setPassword(e.target.value);\n        }}\n      />\n\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h4>OR</h4>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>private key</div>\n      <Input.Password\n        disabled={importMnemonic}\n        style={{ width: 420 }}\n        size=\"large\"\n        value={importPrivatekey}\n        placeholder=\"0x...\"\n        onChange={e => {\n          setImportPrivatekey(e.target.value);\n        }}\n      />\n\n      <hr />\n\n      {importAddress ? (\n        <div style={{ width: 420, height: 200 }}>\n          <div style={{ float: \"right\", marginTop: 64 }}>\n            <Address value={importAddress} />\n          </div>\n          <hr />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div style={{ float: \"right\" }}>\n        <Button\n          style={{ marginTop: 16 }}\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\n          onClick={() => {\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n            if (currentPrivateKey) {\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n            }\n\n            try {\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\n              console.log(officialEthersWallet);\n              setImportAddress(officialEthersWallet.address);\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\n              window.location.reload();\n              //setShowImport(!showImport)\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n        >\n          <span style={{ marginRight: 8 }}>💾</span>Save\n        </Button>\n      </div>\n\n      <Button\n        style={{ marginTop: 16 }}\n        onClick={() => {\n          setShowImport(false);\n        }}\n      >\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\n      </Button>\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nimport WalletImport from \"./WalletImport\";\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const [showImport, setShowImport] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: props.padding ? props.padding : 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: props.size ? props.size : 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  const showImportButton = (\n    <Button\n      style={{ marginTop: 16 }}\n      onClick={() => {\n        setShowImport(true);\n      }}\n    >\n      <span style={{ marginRight: 8 }}>💾</span>Import\n    </Button>\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\n\n      display = (\n        <div>\n          <div>\n            <b>Private Key:</b>\n            <div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {pk}\n              </Text>\n            </div>\n\n            <div style={{ marginTop: 16 }}>\n              <div>\n                <b>Punk Wallet:</b>\n              </div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {fullLink}\n              </Text>\n            </div>\n\n            <br />\n            <i>\n              Point your camera phone at qr code to open in &nbsp;\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\n                Punk Wallet\n              </a>\n              :\n            </i>\n\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                const el = document.createElement(\"textarea\");\n                el.value = fullLink;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(el);\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\n              }}\n            >\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\n            </div>\n          </div>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={\n          showImport\n            ? null\n            : [\n                showImportButton,\n                privateKeyButton,\n                receiveButton,\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  disabled={!amount || !toAddress || qr}\n                  loading={false}\n                  onClick={() => {\n                    const tx = Transactor(props.signer || props.provider);\n\n                    let value;\n                    try {\n                      value = ethers.utils.parseEther(\"\" + amount);\n                    } catch (e) {\n                      // failed to parseEther, try something else\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n                    }\n\n                    tx({\n                      to: toAddress,\n                      value,\n                    });\n                    setOpen(!open);\n                    setQr();\n                  }}\n                >\n                  <SendOutlined /> Send\n                </Button>,\n              ]\n        }\n      >\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.5\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Button } from \"antd\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n**/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title, Text } = Typography;\n\n// displays a page header\n\nexport default function Header({ link, title, subTitle, ...props }) {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\" }}>\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\n            {title}\n          </Title>\n        </a>\n        <Text type=\"secondary\" style={{ textAlign: \"left\" }}>\n          {subTitle}\n        </Text>\n      </div>\n      {props.children}\n    </div>\n  );\n}\n\nHeader.defaultProps = {\n  link: \"\",\n  title: \"篮球与鸡\",\n  subTitle: \"HAKUMA,NATATA\",\n};\n","import { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\n\n// added display of 0 if price={price} is not provided\n\n/**\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n**/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray, localProvider = null) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    // Re-use the localProvider if it's mainnet (to use only one instance of it)\n    if (localProvider && localProvider?._network.chainId === 1) {\n      setProvider(localProvider);\n      return;\n    }\n\n    handleProviders();\n\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray), localProvider]);\n\n  return provider;\n}\n","// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { getRPCPollTime, Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ position: \"absolute\", right: 65, top: 65 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","export default __webpack_public_path__ + \"static/media/pic1.5c1bec9d.png\";","export default __webpack_public_path__ + \"static/media/pic2.c06a7825.png\";","export default __webpack_public_path__ + \"static/media/pic3.3fe0eb43.png\";","export default __webpack_public_path__ + \"static/media/pic4.30a8d3bc.png\";","export default __webpack_public_path__ + \"static/media/pic5.69a2405a.png\";","export default __webpack_public_path__ + \"static/media/pic6.51b748bf.png\";","export default __webpack_public_path__ + \"static/media/pic7.92c12caf.png\";","import React from \"react\";\nimport { Row, Col } from \"antd\";\n\nimport pic1 from \"./images/pic1.png\";\nimport pic2 from \"./images/pic2.png\";\nimport pic3 from \"./images/pic3.png\";\nimport pic4 from \"./images/pic4.png\";\nimport pic5 from \"./images/pic5.png\";\nimport pic6 from \"./images/pic6.png\";\nimport pic7 from \"./images/pic7.png\";\n\n// === Styles === //\nimport \"./style.css\";\n\n/**\n * web3 props can be passed from '../App.jsx' into your local view component for use\n * @param {*} yourLocalBalance balance on current network\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\n * @returns react component\n **/\nfunction Home() {\n  // you can also use hooks locally in your component of choice\n  // in this case, let's keep track of 'purpose' variable from our contract\n  return (\n    <Row style={{ padding: \"1rem\" }}>\n      <Col span={24}>\n        <h1>游戏玩法介绍1</h1>\n        <p>区块链小游戏</p>\n        <h2>1. 安装metamask</h2>\n        <p>访问 https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en-US</p>\n        <img className=\"imageItem\" src={pic1} alt=\"\" />\n        <h2>2. 申请或导入metamask的助记词(助记词由12个单词组成)</h2>\n        <img className=\"imageItem\" src={pic2} alt=\"\" />\n        <h2>3. 配置Goerli测试网络</h2>\n        <img className=\"imageItem\" src={pic3} alt=\"\" />\n        <code>\n          <p>rpc url: https://goerli.infura.io/v3/</p>\n          <p>chain id: 5</p>\n          <p>货币符号：GoerliETH</p>\n          <p>区块链浏览器（选填）：https://goerli.etherscan.io</p>\n        </code>\n        <h2>4. 获得ETH币</h2>\n        <p>水龙头获取(https://goerlifaucet.com)或联系李彬(180505)</p>\n        <h2>5. Pixel War</h2>\n        <p>\n          像素战争，通过修改区块的颜色，绘制自己想要的图案，数据记录在链上。\n          <p style={{ color: \"red\" }}>目前 1000 * 1000 还存在性能问题</p>\n        </p>\n        <img className=\"imageItem\" src={pic4} alt=\"\" />\n        <img className=\"imageItem\" src={pic5} alt=\"\" />\n        <h2>6. Game</h2>\n        <p>\n          0.01个ETH起投，奖池大于0.05个ETH即可开奖。开奖人员获得1%的奖励，合约发布者收取1%的佣金，余下资金由中奖人员获得。\n        </p>\n        <img className=\"imageItem\" src={pic6} alt=\"\" />\n        <img className=\"imageItem\" src={pic7} alt=\"\" />\n        <h2>7. About us</h2>\n        <p>\n          <b>项目已开源，欢迎共创。https://github.com/jerrylib/pixel-wars</b>\n        </p>\n      </Col>\n    </Row>\n  );\n}\n\nexport default Home;\n","import { Button, Card, DatePicker, Divider, Input, Progress, Slider, Spin, Switch } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { SyncOutlined } from \"@ant-design/icons\";\n\nimport { Address, Balance, Events } from \"../components\";\n\nexport default function ExampleUI({\n  purpose,\n  address,\n  mainnetProvider,\n  localProvider,\n  yourLocalBalance,\n  price,\n  tx,\n  readContracts,\n  writeContracts,\n}) {\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>Example UI:</h2>\n        <h4>purpose: {purpose}</h4>\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            style={{ marginTop: 8 }}\n            onClick={async () => {\n              /* look how you call setPurpose on your contract: */\n              /* notice how you pass a call back for tx updates too */\n              const result = tx(writeContracts.YourContract.setPurpose(newPurpose), update => {\n                console.log(\"📡 Transaction Update:\", update);\n                if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                  console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                  console.log(\n                    \" ⛽️ \" +\n                      update.gasUsed +\n                      \"/\" +\n                      (update.gasLimit || update.gas) +\n                      \" @ \" +\n                      parseFloat(update.gasPrice) / 1000000000 +\n                      \" gwei\",\n                  );\n                }\n              });\n              console.log(\"awaiting metamask/web3 confirm result...\", result);\n              console.log(await result);\n            }}\n          >\n            Set Purpose!\n          </Button>\n        </div>\n        <Divider />\n        Your Address:\n        <Address address={address} ensProvider={mainnetProvider} fontSize={16} />\n        <Divider />\n        ENS Address Example:\n        <Address\n          address=\"0x34aA3F359A9D614239015126635CE7732c18fDF3\" /* this will show as austingriffith.eth */\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <div>OR</div>\n        <Balance address={address} provider={localProvider} price={price} />\n        <Divider />\n        <div>🐳 Example Whale Balance:</div>\n        <Balance balance={utils.parseEther(\"1000\")} provider={localProvider} price={price} />\n        <Divider />\n        {/* use utils.formatEther to display a BigNumber: */}\n        <h2>Your Balance: {yourLocalBalance ? utils.formatEther(yourLocalBalance) : \"...\"}</h2>\n        <Divider />\n        Your Contract Address:\n        <Address\n          address={readContracts && readContracts.YourContract ? readContracts.YourContract.address : null}\n          ensProvider={mainnetProvider}\n          fontSize={16}\n        />\n        <Divider />\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how you call setPurpose on your contract: */\n              tx(writeContracts.YourContract.setPurpose(\"🍻 Cheers\"));\n            }}\n          >\n            Set Purpose to &quot;🍻 Cheers&quot;\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /*\n              you can also just craft a transaction and send it to the tx() transactor\n              here we are sending value straight to the contract's address:\n            */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Send Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* look how we call setPurpose AND send some value along */\n              tx(\n                writeContracts.YourContract.setPurpose(\"💵 Paying for this one!\", {\n                  value: utils.parseEther(\"0.001\"),\n                }),\n              );\n              /* this will fail until you make the setPurpose function payable */\n            }}\n          >\n            Set Purpose With Value\n          </Button>\n        </div>\n        <div style={{ margin: 8 }}>\n          <Button\n            onClick={() => {\n              /* you can also just craft a transaction and send it to the tx() transactor */\n              tx({\n                to: writeContracts.YourContract.address,\n                value: utils.parseEther(\"0.001\"),\n                data: writeContracts.YourContract.interface.encodeFunctionData(\"setPurpose(string)\", [\n                  \"🤓 Whoa so 1337!\",\n                ]),\n              });\n              /* this should throw an error about \"no fallback nor receive function\" until you add it */\n            }}\n          >\n            Another Example\n          </Button>\n        </div>\n      </div>\n\n      {/*\n        📑 Maybe display a list of events?\n          (uncomment the event and emit line in YourContract.sol! )\n      */}\n      <Events\n        contracts={readContracts}\n        contractName=\"YourContract\"\n        eventName=\"SetPurpose\"\n        localProvider={localProvider}\n        mainnetProvider={mainnetProvider}\n        startBlock={1}\n      />\n\n      <div style={{ width: 600, margin: \"auto\", marginTop: 32, paddingBottom: 256 }}>\n        <Card>\n          Check out all the{\" \"}\n          <a\n            href=\"https://github.com/austintgriffith/scaffold-eth/tree/master/packages/react-app/src/components\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            📦 components\n          </a>\n        </Card>\n\n        <Card style={{ marginTop: 32 }}>\n          <div>\n            There are tons of generic components included from{\" \"}\n            <a href=\"https://ant.design/components/overview/\" target=\"_blank\" rel=\"noopener noreferrer\">\n              🐜 ant.design\n            </a>{\" \"}\n            too!\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <Button type=\"primary\">Buttons</Button>\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            <SyncOutlined spin /> Icons\n          </div>\n\n          <div style={{ marginTop: 8 }}>\n            Date Pickers?\n            <div style={{ marginTop: 2 }}>\n              <DatePicker onChange={() => {}} />\n            </div>\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Slider range defaultValue={[20, 50]} onChange={() => {}} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Switch defaultChecked onChange={() => {}} />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Progress percent={50} status=\"active\" />\n          </div>\n\n          <div style={{ marginTop: 32 }}>\n            <Spin />\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>⛓️</span>\n        Make sure your local chain is running first:\n        <span className=\"highlight\" style={highlight}>\n          yarn chain\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data, if there is any:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a\n          href=\"https://thegraph.com/docs/en/developer/define-subgraph-hosted/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { useCallback, useEffect, useState } from \"react\";\n\n// === Utils === //\nimport * as ethers from \"ethers\";\nimport isEmpty from \"lodash/isEmpty\";\n\n// === Constants === //\nimport { LOTTERY_ADDRESS, LOTTERY_ABI } from \"../constants\";\nimport { message } from \"antd\";\n\nconst { Contract } = ethers;\n\nconst useLotteryContract = userProvider => {\n  const [players, setPlayers] = useState([]);\n  const [tvl, setTvl] = useState(ethers.BigNumber.from(\"0\"));\n  const [loading, setLoading] = useState(false);\n\n  const contract = useCallback(() => {\n    const pixelWarContract = new Contract(LOTTERY_ADDRESS, LOTTERY_ABI, userProvider);\n    return pixelWarContract;\n  }, [userProvider]);\n\n  const load = useCallback(async () => {\n    const contracts = contract();\n    if (isEmpty(contracts) || isEmpty(userProvider)) return;\n    contracts\n      .getPlayers()\n      .catch(error => message.error(error?.data?.message))\n      .then(setPlayers)\n      .finally(() => {\n        setTimeout(() => {\n          setLoading(false);\n        }, 300);\n      });\n    userProvider.getBalance(LOTTERY_ADDRESS).then(setTvl);\n  }, [contract, userProvider]);\n\n  const participate = useCallback(\n    async turn => {\n      const contracts = contract();\n      if (isEmpty(contracts)) return;\n      const signer = userProvider.getSigner();\n      contracts\n        .connect(signer)\n        .participate(turn, {\n          value: ethers.BigNumber.from(10).pow(16).mul(turn),\n        })\n        .catch(error => message.error(error?.data?.message));\n    },\n    [contract, userProvider],\n  );\n\n  const pickWinner = useCallback(async () => {\n    const contracts = contract();\n    if (isEmpty(contracts)) return;\n    const signer = userProvider.getSigner();\n    contracts\n      .connect(signer)\n      .pickWinner()\n      .catch(error => message.error(error?.data?.message));\n  }, [contract, userProvider]);\n\n  useEffect(load, [load]);\n\n  useEffect(() => {\n    const contracts = contract();\n    if (isEmpty(contracts) || isEmpty(userProvider)) return;\n    contracts.on(\"Participate\", load);\n    contracts.on(\"PickWinner\", load);\n    return () => {\n      contracts.off(\"Participate\", load);\n      contracts.on(\"PickWinner\", load);\n    };\n  }, [contract, userProvider, load]);\n\n  return {\n    tvl,\n    players,\n    loading,\n    pickWinner,\n    participate,\n  };\n};\n\nexport default useLotteryContract;\n","import React from \"react\";\n\n// === Component === //\nimport { InputNumber, Row, Col, Button, Space, List, Typography } from \"antd\";\nimport { useState } from \"react\";\n\n// === Hooks === //\nimport useLotteryContract from \"./../hooks/useLotteryContract\";\n\n// === Utils === //\nimport groupBy from \"lodash/groupBy\";\nimport sortBy from \"lodash/sortBy\";\nimport first from \"lodash/first\";\nimport values from \"lodash/values\";\nimport * as ethers from \"ethers\";\n\nconst Games = props => {\n  const { address, userProvider } = props;\n  const [value, setValue] = useState(1);\n  const { tvl, players, pickWinner, participate } = useLotteryContract(userProvider);\n\n  const deposit = () => {\n    if (value > 0) {\n      participate(value);\n    }\n  };\n\n  const sortData = sortBy(values(groupBy(players)), item => -1 * item.length);\n\n  return (\n    <Row style={{ padding: \"1rem\" }} align=\"middle\" justify=\"center\">\n      <Col span={12}>\n        <List\n          header={<div>下注详情（Tvl：{ethers.utils.formatUnits(tvl, 18)} ETH）</div>}\n          footer={\n            <Button type=\"primary\" onClick={pickWinner}>\n              Pick Winner\n            </Button>\n          }\n          bordered\n          dataSource={sortData}\n          renderItem={(item, index) => (\n            <List.Item key={index}>\n              <Typography.Text mark={address === first(item)}>\n                [{((100 * item.length) / players.length).toFixed(2)}%]\n              </Typography.Text>{\" \"}\n              {first(item)}\n            </List.Item>\n          )}\n        />\n      </Col>\n      <Col span={12} style={{ textAlign: \"center\" }}>\n        <Space>\n          <InputNumber step={1} value={value} onChange={setValue} addonAfter=\"倍数\" />\n          <Button type=\"primary\" onClick={deposit}>\n            下注\n          </Button>\n        </Space>\n        <p>0.01 ETH 起下注，25 倍即投入 0.25 个 ETH</p>\n      </Col>\n    </Row>\n  );\n};\n\nexport default Games;\n","import { useCallback, useEffect, useState } from \"react\";\n\n// === Utils === //\nimport * as ethers from \"ethers\";\nimport moment from \"moment\";\nimport map from \"lodash/map\";\nimport isEmpty from \"lodash/isEmpty\";\nimport isUndefined from \"lodash/isUndefined\";\nimport reduce from \"lodash/reduce\";\n\n// === Constants === //\nimport { PIXEL_WAR_ADDRESS, PIXEL_WAR_ABI } from \"./../constants\";\n\nconst { Contract } = ethers;\n\nconst usePixelWarContract = userProvider => {\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n  const [colors, setColors] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [events, setEvents] = useState([]);\n\n  const contract = useCallback(() => {\n    const pixelWarContract = new Contract(PIXEL_WAR_ADDRESS, PIXEL_WAR_ABI, userProvider);\n    return pixelWarContract;\n  }, [userProvider]);\n\n  const loadMap = useCallback(async () => {\n    const contracts = contract();\n    if (isEmpty(contracts) || isEmpty(userProvider)) return;\n\n    setLoading(true);\n    Promise.all([contracts.maxX(), contracts.maxY()])\n      .then(([maxX, maxY]) => {\n        const nextMaxX = maxX.toNumber();\n        const nextMaxY = maxY.toNumber();\n        setX(nextMaxX);\n        setY(nextMaxY);\n      })\n      .finally(() => {\n        setTimeout(() => {\n          setLoading(false);\n        }, 300);\n      });\n  }, [contract, userProvider]);\n\n  const loadColor = useCallback(\n    (currentX, currentY) => {\n      const contracts = contract();\n      if (isEmpty(contracts) || isEmpty(userProvider)) return;\n      contracts.getColor(currentX, currentY).then(color => {\n        const nextColors = { ...colors, [`${currentX}-${currentY}`]: color };\n        setColors(nextColors);\n      });\n    },\n    [contract, userProvider, colors],\n  );\n\n  const update = useCallback(\n    async (x, y, color) => {\n      const contracts = contract();\n      if (isEmpty(contracts)) return;\n      const signer = userProvider.getSigner();\n      contracts.connect(signer).update(x, y, color);\n    },\n    [contract, userProvider],\n  );\n\n  const addEventListener = useCallback(\n    (address, currentX, currentY, color, transation) => {\n      const currentXValue = currentX.toNumber();\n      const currentYValue = currentY.toNumber();\n      const nextColors = { ...colors, [`${currentX}-${currentY}`]: color };\n      setColors(nextColors);\n      transation.getBlock().then(({ timestamp }) => {\n        const time = moment(1000 * timestamp);\n        setEvents([\n          {\n            time: time.format(\"yyyy-MM-DD HH:mm:ss\"),\n            address,\n            x: currentXValue,\n            y: currentYValue,\n            color,\n          },\n          ...events,\n        ]);\n      });\n    },\n    [events, colors],\n  );\n\n  useEffect(loadMap, [loadMap]);\n\n  useEffect(() => {\n    const contracts = contract();\n    if (isEmpty(contracts) || isEmpty(userProvider)) return;\n    contracts.on(\"ColorUpdate\", addEventListener);\n    return () => {\n      contracts.off(\"ColorUpdate\", addEventListener);\n    };\n  }, [addEventListener, contract, userProvider]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const contracts = contract();\n      if (isEmpty(contracts) || isEmpty(userProvider)) return;\n      const promiseArray = [];\n      console.groupCollapsed(\"开始定时获取颜色\");\n      for (let index = 0; index < x; index++) {\n        for (let innerIndex = 0; innerIndex < y; innerIndex++) {\n          const key = `${index}-${innerIndex}`;\n          if (isUndefined(colors[key])) {\n            console.log(\"check:\", index, innerIndex);\n            promiseArray.push(\n              contracts\n                .getColor(index, innerIndex)\n                .then(color => {\n                  return {\n                    [`${index}-${innerIndex}`]: color,\n                  };\n                })\n                .catch(() => {}),\n            );\n          }\n        }\n        if (promiseArray.length > 120) break;\n      }\n      console.groupEnd(\"开始定时获取颜色\");\n      if (promiseArray.length === 0) return;\n      Promise.allSettled(promiseArray).then(res => {\n        console.log(\"获取成功,\", res, map(res, \"value\"));\n        const nextColors = reduce(\n          map(res, \"value\"),\n          (rs, item) => {\n            return {\n              ...rs,\n              ...item,\n            };\n          },\n          colors,\n        );\n        setColors(nextColors);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [contract, userProvider, colors, x, y]);\n\n  return {\n    x,\n    y,\n    colors,\n    loadColor,\n    loading,\n    update,\n    events,\n  };\n};\n\nexport default usePixelWarContract;\n","import React, { useState } from \"react\";\n\n// === Components === //\nimport { SketchPicker } from \"react-color\";\nimport { Popover, Row, Col, List, Typography, Spin } from \"antd\";\n\n// === Hooks === //\nimport usePixelWarContract from \"./../hooks/usePixelWarContract\";\n\n// === Utils === //\nimport map from \"lodash/map\";\nimport isUndefined from \"lodash/isUndefined\";\n\n// === Contants === //\nimport { DEFAULT_COLOR } from \"./../constants\";\n\n// === Styles === //\nimport \"./style.css\";\n\nconst Block = props => {\n  const { x, y, style, colors, handleMouseEnter } = props;\n  const dataId = `${x}-${y}`;\n  const color = colors[dataId];\n  return (\n    <div\n      id={dataId}\n      key={dataId}\n      style={{\n        ...style,\n        background: color,\n      }}\n      onMouseEnter={() => handleMouseEnter(x, y)}\n      className={isUndefined(color) ? \"PixelWarsItemNotFetch\" : \"PixelWarsItem\"}\n    />\n  );\n};\n\nconst PixelWars = props => {\n  const { address, userProvider } = props;\n  const { x, y, loading, update, events, colors, loadColor } = usePixelWarContract(userProvider);\n  const [color, setColor] = useState(localStorage.getItem(\"color\") || DEFAULT_COLOR);\n\n  const colorUpdate = event => {\n    const id = event.target.getAttribute(\"id\");\n    const [x, y] = id.split(\"-\");\n    update(x, y, color);\n  };\n\n  const heightEvery = `${100 / x}%`;\n  const widthEvery = `${100 / y}%`;\n\n  return (\n    <Row gutter={[24, 24]} style={{ padding: \"1rem\" }}>\n      <Col span={18}>\n        <Spin spinning={loading}>\n          {!loading && (\n            <div className={\"PixelWarsContainer\"} onClick={colorUpdate}>\n              {map(new Array(x), (item, index) => {\n                return map(new Array(y), (innerItem, innerIndex) => {\n                  return (\n                    <Block\n                      x={index}\n                      y={innerIndex}\n                      colors={colors}\n                      handleMouseEnter={loadColor}\n                      style={{ height: heightEvery, width: widthEvery }}\n                    />\n                  );\n                });\n              })}\n            </div>\n          )}\n        </Spin>\n      </Col>\n      <Col span={6}>\n        <p>\n          选择&nbsp;&nbsp;\n          <Popover\n            content={\n              <SketchPicker\n                styles={{ wrap: { margin: \"0 auto\" } }}\n                color={color}\n                onChangeComplete={v => {\n                  setColor(v.hex);\n                  localStorage.setItem(\"color\", v.hex);\n                }}\n              />\n            }\n            title=\"Color Picker\"\n          >\n            <span\n              style={{\n                background: color,\n                border: `1px solid ${color === DEFAULT_COLOR ? \"#ddd\" : color}`,\n                padding: \"0 1rem\",\n                cursor: \"pointer\",\n              }}\n            ></span>\n          </Popover>\n          &nbsp;&nbsp; 颜色填充在上面的区域中\n        </p>\n        <List\n          header={<div>修改记录</div>}\n          bordered\n          dataSource={events}\n          renderItem={(item, index) => (\n            <List.Item title={item.address} key={index}>\n              <Typography.Text mark={address === item.address}>[{item.time}]</Typography.Text> x:{1 + item.x} y:\n              {1 + item.y} <span style={{ background: item.color, padding: \"0 0.6rem\", marginLeft: \"0.5rem\" }}></span>\n            </List.Item>\n          )}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport default PixelWars;\n","import { Button, Col, Menu, Row } from \"antd\";\n\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  // useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Redirect, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph, PixelWars, Games } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider);\n\n  // Sensible pollTimes depending on the provider you are using\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(\n    mainnetContracts,\n    \"DAI\",\n    \"balanceOf\",\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"],\n    mainnetProviderPollingTime,\n  );\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\", [], localProviderPollingTime);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header>\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ display: \"flex\", flex: 1 }}>\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n            />\n          </div>\n        </div>\n      </Header>\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n        <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n      )}\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n      <Menu style={{ justifyContent: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        {/* <Menu.Item key=\"/\">\n          <Link to=\"/\">App Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/debug\">\n          <Link to=\"/debug\">Debug Contracts</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/hints\">\n          <Link to=\"/hints\">Hints</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/exampleui\">\n          <Link to=\"/exampleui\">ExampleUI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/mainnetdai\">\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/subgraph\">\n          <Link to=\"/subgraph\">Subgraph</Link>\n        </Menu.Item> */}\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">Home</Link>\n        </Menu.Item>\n        {injectedProvider && (\n          <Menu.Item key=\"/pixel-war\">\n            <Link to=\"/pixel-war\">Pixel War</Link>\n          </Menu.Item>\n        )}\n        {injectedProvider && (\n          <Menu.Item key=\"/game\">\n            <Link to=\"/game\">Game</Link>\n          </Menu.Item>\n        )}\n      </Menu>\n\n      <Switch>\n        <Route exact path=\"/\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <Home yourLocalBalance={yourLocalBalance} readContracts={readContracts} />\n        </Route>\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n          <Contract\n            name=\"YourContract\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n        {injectedProvider && (\n          <Route path=\"/pixel-war\">\n            <PixelWars userProvider={injectedProvider} />\n          </Route>\n        )}\n        {injectedProvider && (\n          <Route path=\"/game\">\n            <Games address={address} userProvider={injectedProvider} />\n          </Route>\n        )}\n        {address && !injectedProvider && (\n          <Route path=\"*\">\n            <Redirect path=\"/\" />\n          </Route>\n        )}\n      </Switch>\n\n      <ThemeSwitch />\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10, display: \"none\" }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { HashRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <HashRouter>\n        <App subgraphUri={subgraphUri} />\n      </HashRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\n/*\nDecrease the number of RPC calls by passing this value to hooks\nwith pollTime (useContractReader, useBalance, etc.)\n\nSet it to 0 to disable it and make RPC calls \"onBlock\".\n\nNote: this is not used when you are in the local hardhat chain.\n*/\nexport const RPC_POLL_TIME = 30000;\n\nconst localRpcUrl = process.env.REACT_APP_CODESPACES\n  ? `https://${window.location.hostname.replace(\"3000\", \"8545\")}`\n  : \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: localRpcUrl,\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  goerliOptimism: {\n    name: \"goerliOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"https://optimism.io\",\n    rpcUrl: `https://goerli.optimism.io/`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  goerliArbitrum: {\n    name: \"goerliArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421613,\n    blockExplorer: \"https://goerli-rollup-explorer.arbitrum.io\",\n    rpcUrl: \"https://goerli-rollup.arbitrum.io/rpc/\",\n  },\n  arbitrum: {\n    name: \"arbitrum\",\n    color: \"#28a0f0\",\n    chainId: 42161,\n    blockExplorer: \"https://arbiscan.io/\",\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n  },\n  devnetArbitrum: {\n    name: \"devnetArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421612,\n    blockExplorer: \"https://nitro-devnet-explorer.arbitrum.io/\",\n    rpcUrl: \"https://nitro-devnet.arbitrum.io/rpc\",\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n  moonbeam: {\n    name: \"moonbeam\",\n    color: \"#53CBC9\",\n    chainId: 1284,\n    blockExplorer: \"https://moonscan.io\",\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\n  },\n  moonriver: {\n    name: \"moonriver\",\n    color: \"#53CBC9\",\n    chainId: 1285,\n    blockExplorer: \"https://moonriver.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\n  },\n  moonbaseAlpha: {\n    name: \"moonbaseAlpha\",\n    color: \"#53CBC9\",\n    chainId: 1287,\n    blockExplorer: \"https://moonbase.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\n  },\n  moonbeamDevNode: {\n    name: \"moonbeamDevNode\",\n    color: \"#53CBC9\",\n    chainId: 1281,\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\n    rpcUrl: \"http://127.0.0.1:9933\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n\nexport const LOTTERY_ABI = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint16\",\n        name: \"turn\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"Participate\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"winner\",\n        type: \"address\",\n      },\n    ],\n    name: \"PickWinner\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"getPlayers\",\n    outputs: [\n      {\n        internalType: \"address[]\",\n        name: \"\",\n        type: \"address[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint16\",\n        name: \"turn\",\n        type: \"uint16\",\n      },\n    ],\n    name: \"participate\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"pickWinner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"players\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nexport const PIXEL_WAR_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"updater\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"string\",\n        name: \"color\",\n        type: \"string\",\n      },\n    ],\n    name: \"ColorUpdate\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    name: \"colors\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getColor\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"result\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maxX\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"maxY\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"x\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"y\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"color\",\n        type: \"string\",\n      },\n    ],\n    name: \"update\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n];\n\nexport const PIXEL_WAR_ADDRESS = \"0xFA7245235ee0a9d265a7C58838D46e65006BdEa3\";\nexport const LOTTERY_ADDRESS = \"0x1E6724660587C7621a204a91270E8FB24ea9c92d\";\n\nexport const DEFAULT_COLOR = \"#ffffff\";\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}